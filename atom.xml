<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王少星的个人博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wsxyeah.github.io/"/>
  <updated>2016-07-23T09:43:16.000Z</updated>
  <id>https://wsxyeah.github.io/</id>
  
  <author>
    <name>王少星</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JNI 开发中字符编码的一点坑</title>
    <link href="https://wsxyeah.github.io/2016/07/23/jni-charset-encoding/"/>
    <id>https://wsxyeah.github.io/2016/07/23/jni-charset-encoding/</id>
    <published>2016-07-23T09:39:06.000Z</published>
    <updated>2016-07-23T09:43:16.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;坑&quot;&gt;&lt;a href=&quot;#坑&quot; class=&quot;headerlink&quot; title=&quot;坑&quot;&gt;&lt;/a&gt;坑&lt;/h2&gt;&lt;p&gt;JNI 开发中 Java 层向下传字符串比较常用的是 JNIEnv 的 GetStringUTFChars 方法将 &lt;code&gt;jstring&lt;/code&gt; 转为 &lt;code&gt;const char *&lt;/code&gt;，用完后使用 ReleaseStringUTFChars 方法释放。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; jchar * &lt;span class=&quot;title&quot;&gt;GetStringChars&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(JNIEnv *env, jstring &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jboolean *isCopy)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ReleaseStringChars&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(JNIEnv *env, jstring &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; jchar *chars)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然而使用该方法返回的字符串却并非采用标准 UTF-8 编码，而是Modified UTF-8 Strings，即一种修改过的 UTF-8 编码。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;标准的 UTF-8 编码以 8-bit 即一个字节为基本单位，一个字符可以由一到六个字节编码表示，只要留出每个字节的高几位作为标志位就可以表示出该字节的类型，这样就可以判断出其后有几个字节与该字节合在一起表示一个字符。比如最高位为 &lt;code&gt;0&lt;/code&gt; 表示该字节单独表示一个字符；最高两位为 &lt;code&gt;10&lt;/code&gt; 表示该字节是跟在其他字节后面的，仅包含数据；最高三位为 &lt;code&gt;110&lt;/code&gt; 则表示它将与后一个字节共同表示同一字符。&lt;/p&gt;
&lt;p&gt;在 Modified UTF-8 Strings 中，&lt;code&gt;U+FFFF&lt;/code&gt; 以上编码的字符（比如 Emoji 字符）并没有继续遵循 UTF-8 编码的规则，而是将其拆分为两个部分，分别使用三个字节存放，共六个字节。但这样也就导致了使用 UTF-8 编码解析的话便将会其识别为两个字符。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h2&gt;&lt;p&gt;主要有的解决思路有两种，一种是使用 UTF-16 编码，系统提供了对应的 GetStringChars 和 ReleaseStringChars 方法。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; jchar * &lt;span class=&quot;title&quot;&gt;GetStringChars&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(JNIEnv *env, jstring &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jboolean *isCopy)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ReleaseStringChars&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(JNIEnv *env, jstring &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; jchar *chars)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另一种是先在 Java 层拿到 UTF-8 编码的字符串 byte[] 数据，再以 jbyteArray 的形式传入。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] data = str.getBytes(&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// jbyteArray _bytes;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; jsize length = env-&amp;gt;GetArrayLength(_bytes);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jbyte *bytes = env-&amp;gt;GetByteArrayElements(_bytes, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;env-&amp;gt;ReleaseByteArrayElements(_bytes, bytes, JNI_ABORT);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;坑&quot;&gt;&lt;a href=&quot;#坑&quot; class=&quot;headerlink&quot; title=&quot;坑&quot;&gt;&lt;/a&gt;坑&lt;/h2&gt;&lt;p&gt;JNI 开发中 Java 层向下传字符串比较常用的是 JNIEnv 的 GetStringUTFChars 方法将 &lt;code&gt;jstring&lt;/code&gt; 转为 &lt;code&gt;const char *&lt;/code&gt;，用完后使用 ReleaseStringUTFChars 方法释放。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; jchar * &lt;span class=&quot;title&quot;&gt;GetStringChars&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(JNIEnv *env, jstring &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jboolean *isCopy)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ReleaseStringChars&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(JNIEnv *env, jstring &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; jchar *chars)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然而使用该方法返回的字符串却并非采用标准 UTF-8 编码，而是Modified UTF-8 Strings，即一种修改过的 UTF-8 编码。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu 16.04 下搭建 Samba 服务</title>
    <link href="https://wsxyeah.github.io/2016/05/22/ubuntu-samba-service/"/>
    <id>https://wsxyeah.github.io/2016/05/22/ubuntu-samba-service/</id>
    <published>2016-05-22T12:23:56.000Z</published>
    <updated>2016-05-22T13:00:22.000Z</updated>
    
    <content type="html">&lt;p&gt;最近要读源码的时候都要到网页上找，网页跳转不仅速度慢也十分麻烦，于是打算把 AOSP 源码同步到本地。&lt;br&gt;由于我的 Mac 剩余磁盘空间只有 100 多 G 了，就用原来联想的机器（用的是 Ubuntu 16.04）同步了 24GB+ 的 AOSP 源码。并打算在上面搭建 Samba 服务，这样就可以直接在 Mac 上阅读源码了，哈哈。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;安装-Samba&quot;&gt;&lt;a href=&quot;#安装-Samba&quot; class=&quot;headerlink&quot; title=&quot;安装 Samba&quot;&gt;&lt;/a&gt;安装 Samba&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt update &amp;amp;&amp;amp; sudo apt install samba&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;选择共享目录&quot;&gt;&lt;a href=&quot;#选择共享目录&quot; class=&quot;headerlink&quot; title=&quot;选择共享目录&quot;&gt;&lt;/a&gt;选择共享目录&lt;/h2&gt;&lt;p&gt;直接在 Ubuntu 的文件管理器 GUI 右键菜单里选择 属性 -&amp;gt; 本地文件共享，并勾选&lt;code&gt;共享此目录&lt;/code&gt;以及&lt;code&gt;允许其他人来创建和删除这个文件夹里的文件&lt;/code&gt;就可以了，系统会为我们自动设置目录的权限及共享配置。&lt;/p&gt;
&lt;h2 id=&quot;添加用户&quot;&gt;&lt;a href=&quot;#添加用户&quot; class=&quot;headerlink&quot; title=&quot;添加用户&quot;&gt;&lt;/a&gt;添加用户&lt;/h2&gt;&lt;p&gt;我们可以单独创建一个用户用于登录 Samba 服务。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo useradd smb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo passwd smb&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;允许使用该用户登录 Samba 并重启 Samba 服务。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo smbpasswd -a smb &amp;amp;&amp;amp; sudo service smbd restart&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在只要在 Finder 左侧边栏选择服务器，点击 &lt;code&gt;Connect as&lt;/code&gt; 并使用创建的账户登录就可以直接访问共享目录啦。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近要读源码的时候都要到网页上找，网页跳转不仅速度慢也十分麻烦，于是打算把 AOSP 源码同步到本地。&lt;br&gt;由于我的 Mac 剩余磁盘空间只有 100 多 G 了，就用原来联想的机器（用的是 Ubuntu 16.04）同步了 24GB+ 的 AOSP 源码。并打算在上面搭建 Samba 服务，这样就可以直接在 Mac 上阅读源码了，哈哈。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>浅谈 Android 事件分发机制</title>
    <link href="https://wsxyeah.github.io/2016/04/03/touch-event/"/>
    <id>https://wsxyeah.github.io/2016/04/03/touch-event/</id>
    <published>2016-04-03T13:30:04.000Z</published>
    <updated>2016-04-03T23:59:45.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;1-形式&quot;&gt;&lt;a href=&quot;#1-形式&quot; class=&quot;headerlink&quot; title=&quot;1. 形式&quot;&gt;&lt;/a&gt;1. 形式&lt;/h2&gt;&lt;p&gt;Touch 事件被封装成 MotionEvent 对象来传递。&lt;br&gt;由 ACTION_DOWN 开始，经过若干次 ACTION_MOVE 并以 ACTION_UP 结束的一个事件序列称为一个 gesture。&lt;/p&gt;
&lt;h2 id=&quot;2-角色&quot;&gt;&lt;a href=&quot;#2-角色&quot; class=&quot;headerlink&quot; title=&quot;2. 角色&quot;&gt;&lt;/a&gt;2. 角色&lt;/h2&gt;&lt;p&gt;涉及 Touch 事件处理的角色有四种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Activity&lt;/li&gt;
&lt;li&gt;Window&lt;/li&gt;
&lt;li&gt;ViewGroup&lt;/li&gt;
&lt;li&gt;View&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;3-基本流程&quot;&gt;&lt;a href=&quot;#3-基本流程&quot; class=&quot;headerlink&quot; title=&quot;3. 基本流程&quot;&gt;&lt;/a&gt;3. 基本流程&lt;/h2&gt;&lt;p&gt;事件在 activity 中的分发起始于 &lt;code&gt;dispatchTouchEvent()&lt;/code&gt; 方法。从源码可以看出 activity 调用了 Window 的 &lt;code&gt;superDispatchTouchEvent()&lt;/code&gt; 方法来处理，若返回值为 true，则结束事件分发，否则调用 &lt;code&gt;onTouchEvent()&lt;/code&gt;  方法。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dispatchTouchEvent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(MotionEvent ev)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ev.getAction() == MotionEvent.ACTION_DOWN) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		onUserInteraction();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (getWindow().superDispatchTouchEvent(ev)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; onTouchEvent(ev);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Window 的实现类为 PhoneWindow，PhoneWindow 实际调用了 DecorView 的 &lt;code&gt;superDispatchTouchEvent()&lt;/code&gt;。&lt;br&gt;而 DecorView 是 activity 中的顶级 View，它其实是一个 FrameLayout，它的 &lt;code&gt;superDispatchTouchEvent()&lt;/code&gt; 直接调用了 ViewGroup 的 &lt;code&gt;dispatchTouchEvent()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;由此，事件流入 View 层级。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// PhoneWindow&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;superDispatchTouchEvent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(MotionEvent event)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mDecor.superDispatchTouchEvent(event);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// DecorView&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;superDispatchTouchEvent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(MotionEvent event)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.dispatchTouchEvent(event);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;4-ViewGroup-dispatchTouchEvent-流程&quot;&gt;&lt;a href=&quot;#4-ViewGroup-dispatchTouchEvent-流程&quot; class=&quot;headerlink&quot; title=&quot;4. ViewGroup dispatchTouchEvent() 流程&quot;&gt;&lt;/a&gt;4. ViewGroup &lt;code&gt;dispatchTouchEvent()&lt;/code&gt; 流程&lt;/h2&gt;&lt;p&gt;事件流入 View 层级后会逐级分发，ViewGroup 处在事件分发的中间层，是事件分发机制中最复杂的部分。此处源码非常长，就不贴出来了。&lt;/p&gt;
&lt;p&gt;ACTION_DOWN 事件作为一次 gesture 的开始，可以影响后续事件的传递流程。为了方便理解，这里将它与其他类型的事件分开分析。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于 ACITON_DOWN 事件&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dispatchTouchEvent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(MotionEvent ev)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; handled = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 1. 作为一次 gesture 的开始，重置状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 2. 判断是否需要拦截本次事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; intercepted;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!disallowIntercept) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 此时 disallowIntercept 已被重置为 false，onInterceptTouchEvent 一定会被调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		intercepted = onInterceptTouchEvent(ev);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ev.setAction(action); &lt;span class=&quot;comment&quot;&gt;// restore action in case it was changed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		intercepted = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!intercepted &amp;amp;&amp;amp; mChildrenCount != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 3.a 不进行拦截的情况，向下分发&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 	&lt;span class=&quot;comment&quot;&gt;// 从前面到后面遍历子 View，这里用循环仅简单表示遍历过程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (View child : mChildren) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!canViewReceivePointerEvents(child)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				|| !isTransformedTouchPointInView(x, y, child, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;comment&quot;&gt;// 该子 View 不可见或触摸位置不在子 View 边界内，跳过&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 变换 MotionEvent 并传给子 View 的 dispatchTouchEvent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (dispatchTransformedTouchEvent(ev, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;, child, idBitsToAssign)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;comment&quot;&gt;// 若返回 true，表示该子 View 需要处理此次 gesture 的事件，记录此状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				handled = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 3.b 进行拦截的情况，需要自己处理事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		handled = &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.dispatchTouchEvent(event);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; handled;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;对于非 ACITON_DOWN 事件&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dispatchTouchEvent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(MotionEvent ev)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; handled = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 1. 判断是否需要拦截本次事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; intercepted;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!disallowIntercept) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		intercepted = onInterceptTouchEvent(ev);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ev.setAction(action); &lt;span class=&quot;comment&quot;&gt;// restore action in case it was changed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 若之前子 View 调用了 requestDisallowInterceptTouchEvent(true)，则不允许拦截&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		intercepted = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!intercepted &amp;amp;&amp;amp; mChildrenCount != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 2.a 不进行拦截的情况，向下分发&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 	&lt;span class=&quot;comment&quot;&gt;// 仅遍历之前记录的子 View（即对 ACTION_DOWN 事件返回 true 的子 View）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 	&lt;span class=&quot;comment&quot;&gt;// 这里循环仅简单表示遍历过程，实际上源码是使用链表实现的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (View child : children) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 变换 MotionEvent 并传给子 View 的 dispatchTouchEvent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (dispatchTransformedTouchEvent(ev, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;, child, idBitsToAssign)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				handled = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 2.b 进行拦截的情况，需要自己处理事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		handled = &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.dispatchTouchEvent(event);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; handled;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;5-View-dispatchTouchEvent-流程&quot;&gt;&lt;a href=&quot;#5-View-dispatchTouchEvent-流程&quot; class=&quot;headerlink&quot; title=&quot;5. View dispatchTouchEvent() 流程&quot;&gt;&lt;/a&gt;5. View &lt;code&gt;dispatchTouchEvent()&lt;/code&gt; 流程&lt;/h2&gt;&lt;p&gt;View 位于事件分发的最下层，不再向下分发。View 的事件分发逻辑大致等效于 &lt;code&gt;return mOnTouchListener.onTouch(this, e) || onTouchEvent(e);&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;View 的 OnClickListener 是在 &lt;code&gt;onTouchEvent()&lt;/code&gt; 方法里回调的，所以如果我们为 View 设置了 onTouchListener 并在 &lt;code&gt;onTouch()&lt;/code&gt; 里返回 true，那么它的 OnClick 等系统预设的事件会失效。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 简化的 View dispatchTouchEvent 代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dispatchTouchEvent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(MotionEvent event)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; result = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ListenerInfo li = mListenerInfo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (li != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; li.mOnTouchListener != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 		&amp;amp;&amp;amp; (mViewFlags &amp;amp; ENABLED_MASK) == ENABLED&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;amp;&amp;amp; li.mOnTouchListener.onTouch(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, event)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		result = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!result &amp;amp;&amp;amp; onTouchEvent(event)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		result = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-形式&quot;&gt;&lt;a href=&quot;#1-形式&quot; class=&quot;headerlink&quot; title=&quot;1. 形式&quot;&gt;&lt;/a&gt;1. 形式&lt;/h2&gt;&lt;p&gt;Touch 事件被封装成 MotionEvent 对象来传递。&lt;br&gt;由 ACTION_DOWN 开始，经过若干次 ACTION_MOVE 并以 ACTION_UP 结束的一个事件序列称为一个 gesture。&lt;/p&gt;
&lt;h2 id=&quot;2-角色&quot;&gt;&lt;a href=&quot;#2-角色&quot; class=&quot;headerlink&quot; title=&quot;2. 角色&quot;&gt;&lt;/a&gt;2. 角色&lt;/h2&gt;&lt;p&gt;涉及 Touch 事件处理的角色有四种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Activity&lt;/li&gt;
&lt;li&gt;Window&lt;/li&gt;
&lt;li&gt;ViewGroup&lt;/li&gt;
&lt;li&gt;View&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android 日期解析与格式化</title>
    <link href="https://wsxyeah.github.io/2016/03/13/date-format/"/>
    <id>https://wsxyeah.github.io/2016/03/13/date-format/</id>
    <published>2016-03-13T00:33:39.000Z</published>
    <updated>2016-04-04T00:23:54.000Z</updated>
    
    <content type="html">&lt;p&gt;Java 中有 &lt;code&gt;java.text.DateFormat&lt;/code&gt; 这个类来专门处理日期格式，它的实例仅能通过三个工厂方法获取，然后就可以调用 &lt;code&gt;format()&lt;/code&gt; 和 &lt;code&gt;parse()&lt;/code&gt; 方法来格式化和解析了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DateFormat.getDateInstance([int style[, Locale aLocale]])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DateFormat.getDateTimeInstance([int dateStyle, int timeStyle[, Locale aLocale]])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DateFormat.getTimeInstance([int style[, Locale aLocale]])&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中的 style 可以是 SHORT， MEDIUM， LONG 或者 FULL。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SHORT is completely numeric, such as 12.13.52 or 3:30pm&lt;/li&gt;
&lt;li&gt;MEDIUM is longer, such as Jan 12, 1952&lt;/li&gt;
&lt;li&gt;LONG is longer, such as January 12, 1952 or 3:30:32pm&lt;/li&gt;
&lt;li&gt;FULL is pretty completely specified, such as Tuesday, April 12, 1952 AD or 3:30:42pm PST.&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;我们常用的是其子类 &lt;code&gt;SimpleDateFormat&lt;/code&gt;，它可以直接传入一个字符串 pattern 来定义格式，详细文档可以看这里 &lt;a href=&quot;http://developer.android.com/intl/zh-cn/reference/java/text/SimpleDateFormat.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://developer.android.com/intl/zh-cn/reference/java/text/SimpleDateFormat.html&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;坑出没注意&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;如果要解析的日期字符串不是纯数字（比如含有用文字表示的的月份或者周几）的话，一定要记得传入 Locale。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;另外一种日期的格式化问题就是弄成那种像 &lt;code&gt;2小时前&lt;/code&gt;，&lt;code&gt;1天前&lt;/code&gt; 这样的格式。Android 其实自带了一个 &lt;code&gt;DataUtils&lt;/code&gt; 类来处理这种格式。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;formatDateRange()&lt;/code&gt; 可以格式化时间段，比如 &lt;code&gt;3:00pm - 4:00pm&lt;/code&gt;，或者 &lt;code&gt;Dec 31, 2007 - Jan 1, 2008&lt;/code&gt;。&lt;br&gt;&lt;code&gt;formatElapsedTime()&lt;/code&gt; 可以传入秒数，格式化成 &lt;code&gt;MM:SS&lt;/code&gt; 或 &lt;code&gt;H:MM:SS&lt;/code&gt;。&lt;br&gt;&lt;code&gt;formatSameDayTime&lt;/code&gt; 需要传入 now 参数，对在同一天的时间显示时间，不是同一天则仅显示日期。&lt;br&gt;&lt;code&gt;getRelativeDateTimeString()&lt;/code&gt; 就是我们常见的 &lt;code&gt;2小时前&lt;/code&gt; 格式了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Java 中有 &lt;code&gt;java.text.DateFormat&lt;/code&gt; 这个类来专门处理日期格式，它的实例仅能通过三个工厂方法获取，然后就可以调用 &lt;code&gt;format()&lt;/code&gt; 和 &lt;code&gt;parse()&lt;/code&gt; 方法来格式化和解析了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DateFormat.getDateInstance([int style[, Locale aLocale]])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DateFormat.getDateTimeInstance([int dateStyle, int timeStyle[, Locale aLocale]])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DateFormat.getTimeInstance([int style[, Locale aLocale]])&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中的 style 可以是 SHORT， MEDIUM， LONG 或者 FULL。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SHORT is completely numeric, such as 12.13.52 or 3:30pm&lt;/li&gt;
&lt;li&gt;MEDIUM is longer, such as Jan 12, 1952&lt;/li&gt;
&lt;li&gt;LONG is longer, such as January 12, 1952 or 3:30:32pm&lt;/li&gt;
&lt;li&gt;FULL is pretty completely specified, such as Tuesday, April 12, 1952 AD or 3:30:42pm PST.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>我对 Android 线程间通信机制的思考</title>
    <link href="https://wsxyeah.github.io/2016/03/03/thinking-about-handler/"/>
    <id>https://wsxyeah.github.io/2016/03/03/thinking-about-handler/</id>
    <published>2016-03-03T13:00:42.000Z</published>
    <updated>2016-04-04T00:26:55.000Z</updated>
    
    <content type="html">&lt;p&gt;Android 中线程间通信的基本机制其实很简单：为目标线程建立一个消息循环用来“监听”消息，之后我们只要在其他线程中向目标线程发送消息就可以被目标线程接收并处理，这样就完成了两个线程之间的通信，所以也被称为消息机制。&lt;/p&gt;
&lt;p&gt;下面我们一步一步来分析这个机制的实现（以下源码均基于 SDK 23）。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;1-为目标线程建立一个消息循环用来“监听”消息&quot;&gt;&lt;a href=&quot;#1-为目标线程建立一个消息循环用来“监听”消息&quot; class=&quot;headerlink&quot; title=&quot;1. 为目标线程建立一个消息循环用来“监听”消息&quot;&gt;&lt;/a&gt;1. 为目标线程建立一个消息循环用来“监听”消息&lt;/h2&gt;&lt;p&gt;我们都知道 Java 中一个线程执行的入口点是它的 &lt;code&gt;run()&lt;/code&gt; 方法（或者对应 Runable 对象的 &lt;code&gt;run()&lt;/code&gt; 方法），我们要为目标线程建立消息循环就需要在此处进行操作，否则线程代码一下子就执行完了，结束掉了。&lt;/p&gt;
&lt;p&gt;这时我们就需要 Looper 来完成这个工作了，从其命名我们就可以看出来它是作为一个“循环器”来使用，它可以方便地为我们的线程建立消息循环。我们在使用 Looper 的时候都是先调用 &lt;code&gt;Looper.prepare()&lt;/code&gt; ,然后创建 Handler 作为消息处理器，最后再调用 &lt;code&gt;Looper.loop()&lt;/code&gt; 来启动消息循环。&lt;/p&gt;
&lt;p&gt;那么 &lt;code&gt;Looper.prepare()&lt;/code&gt; 干了些什么事情呢，我们来看一下其源码。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;/** Initialize the current thread as a looper.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * This gives you a chance to create handlers that then reference&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * this looper, before actually starting the loop. Be sure to call&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; #loop()&amp;#125; after calling this method, and end it by calling&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; #quit()&amp;#125;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    prepare(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; quitAllowed)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (sThreadLocal.get() != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; RuntimeException(&lt;span class=&quot;string&quot;&gt;&quot;Only one Looper may be created per thread&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sThreadLocal.set(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Looper(quitAllowed));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Looper&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; quitAllowed)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mQueue = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MessageQueue(quitAllowed);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mThread = Thread.currentThread();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中的 &lt;code&gt;sThreadLocal&lt;/code&gt; 是 Looper 类的静态 ThreadLocal 类对象。这里先说明一下 ThreadLocal 的作用，ThreadLocal 就是用来从当前线程对象里存取数据的一个工具类。&lt;br&gt;ThreadLocal 使用 &lt;code&gt;Thread.currentThread()&lt;/code&gt; 来获得当前代码所在的线程对象，然后把数据存到线程对象中，get 也是从线程对象里取出来。&lt;/p&gt;
&lt;p&gt;我们从源码可以看出来 &lt;strong&gt;&lt;code&gt;Looper.prepare()&lt;/code&gt; 会向当前线程对象存放一个 Looper 对象&lt;/strong&gt;，另外 Looper 对象在创建的时候创建一个 MessageQueue，将其以及当前线程对象作为对象成员。&lt;/p&gt;
&lt;p&gt;再来看 Handler 的创建。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Use the &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; Looper&amp;#125; for the current thread with the specified callback interface&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * and set whether the handler should be asynchronous.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Handlers are synchronous by default unless this constructor is used to make&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * one that is strictly asynchronous.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Asynchronous messages represent interrupts or events that do not require global ordering&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * with respect to synchronous messages.  Asynchronous messages are not subject to&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * the synchronization barriers introduced by &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; MessageQueue#enqueueSyncBarrier(long)&amp;#125;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; callback The callback interface in which to handle messages, or null.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; async If true, the handler calls &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; Message#setAsynchronous(boolean)&amp;#125; for&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * each &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; Message&amp;#125; that is sent to it or &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; Runnable&amp;#125; that is posted to it.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@hide&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Handler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Callback callback, &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; async)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (FIND_POTENTIAL_LEAKS) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Class&amp;lt;? extends Handler&amp;gt; klass = getClass();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (klass.getModifiers() &amp;amp; Modifier.STATIC) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Log.w(TAG, &lt;span class=&quot;string&quot;&gt;&quot;The following Handler class should be static or leaks might occur: &quot;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                klass.getCanonicalName());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mLooper = Looper.myLooper();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mLooper == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; RuntimeException(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;Can&#39;t create handler inside thread that has not called Looper.prepare()&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mQueue = mLooper.mQueue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mCallback = callback;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mAsynchronous = async;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Use the provided &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; Looper&amp;#125; instead of the default one and take a callback&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * interface in which to handle messages.  Also set whether the handler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * should be asynchronous.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Handlers are synchronous by default unless this constructor is used to make&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * one that is strictly asynchronous.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Asynchronous messages represent interrupts or events that do not require global ordering&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * with respect to synchronous messages.  Asynchronous messages are not subject to&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * the synchronization barriers introduced by &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; MessageQueue#enqueueSyncBarrier(long)&amp;#125;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; looper The looper, must not be null.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; callback The callback interface in which to handle messages, or null.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; async If true, the handler calls &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; Message#setAsynchronous(boolean)&amp;#125; for&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * each &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; Message&amp;#125; that is sent to it or &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; Runnable&amp;#125; that is posted to it.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@hide&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Handler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Looper looper, Callback callback, &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; async)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mLooper = looper;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mQueue = looper.mQueue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mCallback = callback;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mAsynchronous = async;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Handler 的构造函数可以传入一个 Looper 对象，否则将会调用 &lt;code&gt;Looper.myLooper()&lt;/code&gt; 从当前线程对象里取出前面 &lt;code&gt;Looper.prepare()&lt;/code&gt; 存的 Looper 对象，之后 Handler 将 Looper 和 MessageQueue 作为对象成员。&lt;/p&gt;
&lt;p&gt;最后我们就可以调用 &lt;code&gt;Looper.loop()&lt;/code&gt; 来启动消息循环了。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Run the message queue in this thread. Be sure to call&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; #quit()&amp;#125; to end the loop.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Looper me = myLooper();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (me == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; RuntimeException(&lt;span class=&quot;string&quot;&gt;&quot;No Looper; Looper.prepare() wasn&#39;t called on this thread.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; MessageQueue queue = me.mQueue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Make sure the identity of this thread is that of the local process,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// and keep track of what that identity token actually is.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Binder.clearCallingIdentity();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; ident = Binder.clearCallingIdentity();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (;;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Message msg = queue.next(); &lt;span class=&quot;comment&quot;&gt;// might block&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (msg == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// No message indicates that the message queue is quitting.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// This must be in a local variable, in case a UI event sets the logger&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Printer logging = me.mLogging;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (logging != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            logging.println(&lt;span class=&quot;string&quot;&gt;&quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Dispatching to &quot;&lt;/span&gt; + msg.target + &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    msg.callback + &lt;span class=&quot;string&quot;&gt;&quot;: &quot;&lt;/span&gt; + msg.what);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        msg.target.dispatchMessage(msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (logging != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            logging.println(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; Finished to &quot;&lt;/span&gt; + msg.target + &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt; + msg.callback);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Make sure that during the course of dispatching the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// identity of the thread wasn&#39;t corrupted.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; newIdent = Binder.clearCallingIdentity();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ident != newIdent) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Log.wtf(TAG, &lt;span class=&quot;string&quot;&gt;&quot;Thread identity changed from 0x&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    + Long.toHexString(ident) + &lt;span class=&quot;string&quot;&gt;&quot; to 0x&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    + Long.toHexString(newIdent) + &lt;span class=&quot;string&quot;&gt;&quot; while dispatching to &quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    + msg.target.getClass().getName() + &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    + msg.callback + &lt;span class=&quot;string&quot;&gt;&quot; what=&quot;&lt;/span&gt; + msg.what);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        msg.recycleUnchecked();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Looper.loop()&lt;/code&gt; 会从当前线程对象中把前面存的 Looper 对象以及该对象的 mMessageQueue 取出来（这里取消息是通过调用 MessageQueue 的 &lt;code&gt;next()&lt;/code&gt; 方法来取得下一条消息），然后启动消息循环，不停地从 mMessageQueue 里取消息并分派处理，也就是会调用消息对应的 target Handler 的 &lt;code&gt;dispathMessage()&lt;/code&gt; 方法，当然这个消息处理过程就与 &lt;code&gt;Looper.loop()&lt;/code&gt; 在同一个线程里了。&lt;/p&gt;
&lt;h2 id=&quot;2-向目标线程发消息&quot;&gt;&lt;a href=&quot;#2-向目标线程发消息&quot; class=&quot;headerlink&quot; title=&quot;2. 向目标线程发消息&quot;&gt;&lt;/a&gt;2. 向目标线程发消息&lt;/h2&gt;&lt;p&gt;在 Android 中我们使用 Handler 来完成的。我们从前面就知道 Handler 在创建的时候就会持有一个 MessageQueue 的引用，其实这个就是用来往 MessageQueue 里发消息用的。&lt;/p&gt;
&lt;p&gt;当我们使用 Handler 发消息时，最后都会调用到 Handler 的 &lt;code&gt;enqueueMessage()&lt;/code&gt; 方法。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;enqueueMessage&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(MessageQueue queue, Message msg, &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; uptimeMillis)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    msg.target = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mAsynchronous) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        msg.setAsynchronous(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; queue.enqueueMessage(msg, uptimeMillis);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里 Handler 将 Message 的 target 设置为自己，也就是指定了这条消息将会由自己来处理，然后将 Message 放进 MessageQueue 里面。&lt;/p&gt;
&lt;p&gt;因为 MessageQueue 的 &lt;code&gt;enqueueMessage()&lt;/code&gt; 方法的权限是 package level 的，我们不能直接调用，就需要通过 Handler 来把消息发到 MessageQueue 里。&lt;/p&gt;
&lt;p&gt;所以 Handler 的作用主要有两个，一是处理消息，二是作为发消息的一个工具。&lt;/p&gt;
&lt;h2 id=&quot;3-总结&quot;&gt;&lt;a href=&quot;#3-总结&quot; class=&quot;headerlink&quot; title=&quot;3. 总结&quot;&gt;&lt;/a&gt;3. 总结&lt;/h2&gt;&lt;p&gt;那么根据以上分析，我们可以得出结论：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一个 Looper 对象一定对应于一个线程，一个线程最多有一个 Looper 对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一个 Message 最终由它的 target Handler 来处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一个 Message 会在&lt;strong&gt;持有它所被加入的 MessageQueue 的 Looper 对象&lt;/strong&gt;对应的线程中被处理&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以如果我们在子线程中完成了耗时操作想要切换到主线程更新 UI 的时候，思路应该是：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;主线程 Looper 的 MessageQueue -&amp;gt; 主线程 Looper -&amp;gt; 构造持有主线程 Looper 的 Handler（new Handler(Looper.getMainLooper())） -&amp;gt; 使用该 Handler 发送消息&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;以上就是我对 Android 中进程间通信机制的理解。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Android 中线程间通信的基本机制其实很简单：为目标线程建立一个消息循环用来“监听”消息，之后我们只要在其他线程中向目标线程发送消息就可以被目标线程接收并处理，这样就完成了两个线程之间的通信，所以也被称为消息机制。&lt;/p&gt;
&lt;p&gt;下面我们一步一步来分析这个机制的实现（以下源码均基于 SDK 23）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Handler" scheme="https://wsxyeah.github.io/tags/Handler/"/>
    
  </entry>
  
  <entry>
    <title>重新认识 Activity LaunchMode</title>
    <link href="https://wsxyeah.github.io/2015/12/19/activity-launch-mode/"/>
    <id>https://wsxyeah.github.io/2015/12/19/activity-launch-mode/</id>
    <published>2015-12-19T08:43:40.000Z</published>
    <updated>2016-04-04T00:53:10.000Z</updated>
    
    <content type="html">&lt;p&gt;做 Android 的同学想必对 activity 启动模式都不陌生，activity 有四种启动模式（ &lt;code&gt;standard&lt;/code&gt;，&lt;code&gt;singleTop&lt;/code&gt;，&lt;code&gt;singleTask&lt;/code&gt;，&lt;code&gt;singleInstance&lt;/code&gt;），网上和一些书上也有各种讲解，但这些文章大多是针对四种启动模式进行介绍，总是在看过一段时间后就忘掉了。本文希望带你重新理解 activity 启动模式，并理解一些其他的相关概念，而不是仅仅针对四种启动模式。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;1-从-Task-说起&quot;&gt;&lt;a href=&quot;#1-从-Task-说起&quot; class=&quot;headerlink&quot; title=&quot;1. 从 Task 说起&quot;&gt;&lt;/a&gt;1. 从 Task 说起&lt;/h2&gt;&lt;p&gt;Activity 启动模式是与 task 密切相关的，所以我们先从 task 说起。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A task is a collection of activities that users interact with when performing a certain job. The activities are arranged in a stack (the &lt;em&gt;back stack&lt;/em&gt;), in the order in which each activity is opened.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面这句话是官方文档里的，解释了 Android 中 task 的概念，task 就是若干 activity 组成的一个集合，以栈的形式来管理。在 Android 中，每个 activity 都是运行在 task 中的，前台 task 的栈顶 activity 位于前台，可以直接与用户交互。&lt;/p&gt;
&lt;p&gt;那么一个 activity 运行在哪个 task 中是由谁来决定的呢？我们首先来看 taskAffinity，taskAffinity 是影响 Activity 运行在哪个 task 中的第一个因素。&lt;/p&gt;
&lt;p&gt;一个 activity 的 taskAffinity 是我们在 &lt;code&gt;manifests.xml&lt;/code&gt; 里定义的，每个 Activity 都可以设置一个 &lt;code&gt;android:taskAffinity&lt;/code&gt; 属性，它的值是一个字符串。&lt;code&gt;application&lt;/code&gt; 元素也有这个属性，它的默认值是 &lt;code&gt;manifest&lt;/code&gt; 元素中指定的包名（&lt;code&gt;package&lt;/code&gt; 属性）。对于 Activity 的这个属性，当我们不显式设置的时候它就会从 &lt;code&gt;application&lt;/code&gt; 元素继承。&lt;/p&gt;
&lt;p&gt;那么&lt;strong&gt;在 taskAffinity 属性起作用&lt;/strong&gt;的情况下，除了 taskAffinity 值为空字符串的 Activity，具有相同 taskAffinity 的 Activity 会运行在同一个 task 中，即使它们处于不同的应用中。taskAffinity 为空字符串表示这个 Activity 不会与其他任何 task 关联。&lt;/p&gt;
&lt;h2 id=&quot;2-manifests-xml-中的-launchMode&quot;&gt;&lt;a href=&quot;#2-manifests-xml-中的-launchMode&quot; class=&quot;headerlink&quot; title=&quot;2. manifests.xml 中的 launchMode&quot;&gt;&lt;/a&gt;2. &lt;code&gt;manifests.xml&lt;/code&gt; 中的 launchMode&lt;/h2&gt;&lt;p&gt;我们可以在 &lt;code&gt;manifests.xml&lt;/code&gt; 中为 activity 指定 &lt;code&gt;android:launchMode&lt;/code&gt; 属性，可以的取值有 &lt;code&gt;standard&lt;/code&gt;，&lt;code&gt;singleTop&lt;/code&gt;，&lt;code&gt;singleTask&lt;/code&gt;，&lt;code&gt;singleInstance&lt;/code&gt;，默认值是 &lt;code&gt;standard&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;那么我们不设置 Intent flags（下文会讲到）的情况下启动一个 activity 的时候，系统就会根据 &lt;code&gt;manifests.xml&lt;/code&gt; 里设置的 launchMode 来决定 activity 启动模式。下面是四种启动模式的处理说明。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;standard&lt;/code&gt;，&lt;code&gt;singleTop&lt;/code&gt;：在当前 task 中启动，&lt;strong&gt;忽略 taskAffinity 属性&lt;/strong&gt;。&lt;br&gt;  两种模式的区别是 &lt;code&gt;standard&lt;/code&gt; 模式每次启动都会创建新的实例，而 &lt;code&gt;singleTop&lt;/code&gt; 模式则是若已经有该 activity 的实例存在于 task 栈顶的情况下不再创建新实例，而是回调该实例的 &lt;code&gt;onNewIntent()&lt;/code&gt; 方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;singleTask&lt;/code&gt;：这时该 activity 要在哪个 task 中运行就由我们前面指定的 taskAffinity 来决定了（该 activity 只能运行在 taskAffinity 与自己的 taskAffinity 相同的 task 中）。并且在这个 task 中该 activity 的实例只允许存在一个，若已经有一个实例在栈顶，就会回调它的 &lt;code&gt;onNewIntent()&lt;/code&gt; 方法；若有实例且不在栈顶，系统则会将该 task 中该位于该实例之上的 activity 出栈销毁，使该实例回到前台，并回调其 &lt;code&gt;onNewIntent()&lt;/code&gt; 方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;singleInstance&lt;/code&gt;：与 &lt;code&gt;singleTask&lt;/code&gt; 类似，区别在于 &lt;code&gt;singleInstance&lt;/code&gt; 的 task 中只能有一个 activity 实例存在，即该 activity 只能单独运行于一个 task 中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3-Intent-flag&quot;&gt;&lt;a href=&quot;#3-Intent-flag&quot; class=&quot;headerlink&quot; title=&quot;3. Intent flag&quot;&gt;&lt;/a&gt;3. Intent flag&lt;/h2&gt;&lt;p&gt;影响 activity 启动模式的另一个地方就是 Intent flag 了。我们可以在使用 Intent 启动一个 activity 的时候可以调用 Intent 的 &lt;code&gt;setFlag()&lt;/code&gt; 方法来为它设置标志位，且 Intent flag 具有更高的优先级。影响 activity 启动模式的 Intent flag 有下面几个。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;FLAG_ACTIVITY_NEW_TASK&lt;/code&gt;：在新 task 中启动 activity，效果与 &lt;code&gt;singleTask&lt;/code&gt; 模式类似，但不会清除目标 activity 之上的 activity。使用这个 flag 可以实现应用间切换的效果。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;FLAG_ACTIVITY_SINGLE_TOP&lt;/code&gt;：与 &lt;code&gt;singleTop&lt;/code&gt; 模式效果相同。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;FLAG_ACTIVITY_CLEAR_TOP&lt;/code&gt;：若目标 activity 在其 task 中已经有实例存在，则将 task 中其上的 activity 出栈销毁，使该实例回到前台，并回调其 &lt;code&gt;onNewIntent()&lt;/code&gt; 方法。与 &lt;code&gt;FLAG_ACTIVITY_NEW_TASK&lt;/code&gt; 结合使用可以实现 &lt;code&gt;singleTask&lt;/code&gt; 模式的效果。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;做 Android 的同学想必对 activity 启动模式都不陌生，activity 有四种启动模式（ &lt;code&gt;standard&lt;/code&gt;，&lt;code&gt;singleTop&lt;/code&gt;，&lt;code&gt;singleTask&lt;/code&gt;，&lt;code&gt;singleInstance&lt;/code&gt;），网上和一些书上也有各种讲解，但这些文章大多是针对四种启动模式进行介绍，总是在看过一段时间后就忘掉了。本文希望带你重新理解 activity 启动模式，并理解一些其他的相关概念，而不是仅仅针对四种启动模式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="LaunchMode" scheme="https://wsxyeah.github.io/tags/LaunchMode/"/>
    
  </entry>
  
  <entry>
    <title>Android NDK 开发环境搭建</title>
    <link href="https://wsxyeah.github.io/2015/12/06/android-ndk-start/"/>
    <id>https://wsxyeah.github.io/2015/12/06/android-ndk-start/</id>
    <published>2015-12-06T03:10:08.000Z</published>
    <updated>2016-04-04T00:22:53.000Z</updated>
    
    <content type="html">&lt;p&gt;之前也曾看过一些介绍 NDK 的文章，但是由于嫌（tuo）麻（yan）烦（zheng）一直没有实践过，这两天读了些文章和文档，打算把 NDK 的项目搭建的一些东西整理一下。&lt;/p&gt;
&lt;p&gt;本文主要介绍 Eclipse 下和 Android Studio 下 NDK 开发环境的搭建。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;1-NDK-下载&quot;&gt;&lt;a href=&quot;#1-NDK-下载&quot; class=&quot;headerlink&quot; title=&quot;1. NDK 下载&quot;&gt;&lt;/a&gt;1. NDK 下载&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://developer.android.com/ndk/downloads/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://developer.android.com/ndk/downloads/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在这里根据平台选择相应的文件下载。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Windows 下面可以直接双击下载的 exe 文件解压。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Linux 和 OS X 用户需要进入下载的文件目录，执行下面的命令解压。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;chmod a+x android-ndk-r10c-darwin-x86_64.bin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./android-ndk-r10c-darwin-x86_64.bin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-环境变量配置&quot;&gt;&lt;a href=&quot;#2-环境变量配置&quot; class=&quot;headerlink&quot; title=&quot;2. 环境变量配置&quot;&gt;&lt;/a&gt;2. 环境变量配置&lt;/h2&gt;&lt;p&gt;只要把 NDK 目录加入到系统 PATH 变量就好了，这步是为了方便从命令行执行 NDK 脚本。&lt;/p&gt;
&lt;h2 id=&quot;3-Eclipse-下-NDK-项目搭建&quot;&gt;&lt;a href=&quot;#3-Eclipse-下-NDK-项目搭建&quot; class=&quot;headerlink&quot; title=&quot;3. Eclipse 下 NDK 项目搭建&quot;&gt;&lt;/a&gt;3. Eclipse 下 NDK 项目搭建&lt;/h2&gt;&lt;h3 id=&quot;1-首先在-Eclipse-的设置里选择-NDK-目录。&quot;&gt;&lt;a href=&quot;#1-首先在-Eclipse-的设置里选择-NDK-目录。&quot; class=&quot;headerlink&quot; title=&quot;1. 首先在 Eclipse 的设置里选择 NDK 目录。&quot;&gt;&lt;/a&gt;1. 首先在 Eclipse 的设置里选择 NDK 目录。&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Android &amp;gt; NDK &amp;gt; NDK Location&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-新建-Android-项目&quot;&gt;&lt;a href=&quot;#2-新建-Android-项目&quot; class=&quot;headerlink&quot; title=&quot;2. 新建 Android 项目&quot;&gt;&lt;/a&gt;2. 新建 Android 项目&lt;/h3&gt;&lt;h3 id=&quot;3-添加-native-方法&quot;&gt;&lt;a href=&quot;#3-添加-native-方法&quot; class=&quot;headerlink&quot; title=&quot;3. 添加 native 方法&quot;&gt;&lt;/a&gt;3. 添加 native 方法&lt;/h3&gt;&lt;p&gt;native 方法在方法签名前加 &lt;code&gt;native&lt;/code&gt; 关键字，无方法体。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;native&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;yo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;4-为项目添加-NDK-支持&quot;&gt;&lt;a href=&quot;#4-为项目添加-NDK-支持&quot; class=&quot;headerlink&quot; title=&quot;4. 为项目添加 NDK 支持&quot;&gt;&lt;/a&gt;4. 为项目添加 NDK 支持&lt;/h3&gt;&lt;p&gt;在左侧项目视图上点击右键，选择 Android Tools -&amp;gt; Add Native Support…，然后输入 Library Name：libxxx.so，Finish。&lt;/p&gt;
&lt;p&gt;之后 Eclipse 会为我们生成 jni 目录以及 &lt;code&gt;Android.mk&lt;/code&gt;，&lt;code&gt;xxx.cpp&lt;/code&gt; 两个文件。&lt;/p&gt;
&lt;h3 id=&quot;5-生成-jni-头文件&quot;&gt;&lt;a href=&quot;#5-生成-jni-头文件&quot; class=&quot;headerlink&quot; title=&quot;5. 生成 jni 头文件&quot;&gt;&lt;/a&gt;5. 生成 jni 头文件&lt;/h3&gt;&lt;p&gt;在 Eclipse 中执行 build 命令，然后进入到项目的 &lt;code&gt;bin\classes&lt;/code&gt; 目录，执行 &lt;code&gt;javah -cp 完整类名 android.jar&lt;/code&gt; 命令，其中完整的类名是指包含包名，&lt;code&gt;android.jar&lt;/code&gt; 是 SDK 目录下对应的 compile SDK 版本目录下面的 android.jar 的路径，比如我的 compile SDK 版本是 23，那我的路径就是 &lt;code&gt;SDK目录\platforms\android-23\android.jar&lt;/code&gt;。此时会 javah 会为我们在 classes 目录下生成 jni 头文件。&lt;/p&gt;
&lt;h3 id=&quot;6-根据-jni-头文件在-xxx-cpp-中编写-native-代码&quot;&gt;&lt;a href=&quot;#6-根据-jni-头文件在-xxx-cpp-中编写-native-代码&quot; class=&quot;headerlink&quot; title=&quot;6. 根据 jni 头文件在 xxx.cpp 中编写 native 代码&quot;&gt;&lt;/a&gt;6. 根据 jni 头文件在 xxx.cpp 中编写 native 代码&lt;/h3&gt;&lt;p&gt;此处需要注意的是如果使用 C++ 编写，需要定义 &lt;code&gt;extern &amp;quot;C&amp;quot;&lt;/code&gt; 宏。&lt;/p&gt;
&lt;p&gt;关于 &lt;code&gt;extern &amp;quot;C&amp;quot;&lt;/code&gt; 的详细信息可以参考这篇文章 &lt;a href=&quot;http://www.jianshu.com/p/5d2eeeb93590&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;extern “c”用法解析
&lt;/a&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;jni.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;ifdef&lt;/span&gt; __cplusplus&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;C&quot;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* Class:     me_sxwang_jnipractice_MainActivity&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* Method:    yo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* Signature: ()Ljava/lang/String;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;JNIEXPORT jstring JNICALL &lt;span class=&quot;title&quot;&gt;Java_me_sxwang_jnipractice_MainActivity_yo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;params&quot;&gt;(JNIEnv *env, jobject thiz)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; env-&amp;gt;NewStringUTF(&lt;span class=&quot;string&quot;&gt;&quot;I come from JNI.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;ifdef&lt;/span&gt; __cplusplus&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;7-编译-native-代码&quot;&gt;&lt;a href=&quot;#7-编译-native-代码&quot; class=&quot;headerlink&quot; title=&quot;7. 编译 native 代码&quot;&gt;&lt;/a&gt;7. 编译 native 代码&lt;/h3&gt;&lt;p&gt;进入项目根目录，使用 &lt;code&gt;ndk-build&lt;/code&gt; 命令执行编译，编译完成后会在项目的 &lt;code&gt;libs&lt;/code&gt; 目录下生成相应的 so 文件。&lt;/p&gt;
&lt;h3 id=&quot;8-加载-jni-库，运行调试&quot;&gt;&lt;a href=&quot;#8-加载-jni-库，运行调试&quot; class=&quot;headerlink&quot; title=&quot;8. 加载 jni 库，运行调试&quot;&gt;&lt;/a&gt;8. 加载 jni 库，运行调试&lt;/h3&gt;&lt;p&gt;在类中添加初始化代码段加载 jni 库&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	System.loadLibrary(&lt;span class=&quot;string&quot;&gt;&quot;xxx&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;4-Android-Studio-下-NDK-项目搭建（基于-Android-Studio-1-5）&quot;&gt;&lt;a href=&quot;#4-Android-Studio-下-NDK-项目搭建（基于-Android-Studio-1-5）&quot; class=&quot;headerlink&quot; title=&quot;4. Android Studio 下 NDK 项目搭建（基于 Android Studio 1.5）&quot;&gt;&lt;/a&gt;4. Android Studio 下 NDK 项目搭建（基于 Android Studio 1.5）&lt;/h2&gt;&lt;h3 id=&quot;1-新建-Android-项目&quot;&gt;&lt;a href=&quot;#1-新建-Android-项目&quot; class=&quot;headerlink&quot; title=&quot;1. 新建 Android 项目&quot;&gt;&lt;/a&gt;1. 新建 Android 项目&lt;/h3&gt;&lt;h3 id=&quot;2-在项目的-Project-Structure-中选择-NDK-所在目录&quot;&gt;&lt;a href=&quot;#2-在项目的-Project-Structure-中选择-NDK-所在目录&quot; class=&quot;headerlink&quot; title=&quot;2. 在项目的 Project Structure 中选择 NDK 所在目录&quot;&gt;&lt;/a&gt;2. 在项目的 Project Structure 中选择 NDK 所在目录&lt;/h3&gt;&lt;h3 id=&quot;3-为-build-gradle-Module-app-添加-NDK-模块&quot;&gt;&lt;a href=&quot;#3-为-build-gradle-Module-app-添加-NDK-模块&quot; class=&quot;headerlink&quot; title=&quot;3. 为 build.gradle (Module: app) 添加 NDK 模块&quot;&gt;&lt;/a&gt;3. 为 &lt;code&gt;build.gradle (Module: app)&lt;/code&gt; 添加 NDK 模块&lt;/h3&gt;&lt;p&gt;&lt;del&gt;在 android &amp;gt; defaultConfig 下新增如下片段，执行 build，会提示需要在 gradle.properties 添加 &lt;code&gt;android.useDeprecatedNdk=true&lt;/code&gt;，根据提示添加完后重新 build 一下。&lt;/del&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ndk &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	moduleName &amp;quot;xxx&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 &lt;a href=&quot;&quot;&gt;https://bintray.com/android/android-tools/com.android.tools.build.gradle-experimental/view&lt;/a&gt; 查看 gradle-experimental 插件的最新版，并在 Project 的 buildscript&amp;gt;dependencies classpath 中替换原有的插件。&lt;br&gt;启用 gralde-experimental 需要修改 module 的配置。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apply plugin: &amp;apos;com.android.model.application&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;model &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	android &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		compileSdkVersion = 23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		buildToolsVersion = &amp;quot;23.0.1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		defaultConfig.with &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			applicationId = &amp;quot;com.google.sample.helloandroidjni&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			minSdkVersion.apiLevel = 22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			targetSdkVersion.apiLevel = 23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			versionCode = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			versionName = &amp;quot;1.0&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	android.buildTypes &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		release &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			minifyEnabled = false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			proguardFiles.add(file(&amp;apos;proguard-android.txt&amp;apos;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;4-创建-native-方法&quot;&gt;&lt;a href=&quot;#4-创建-native-方法&quot; class=&quot;headerlink&quot; title=&quot;4. 创建 native 方法&quot;&gt;&lt;/a&gt;4. 创建 native 方法&lt;/h3&gt;&lt;p&gt;同 Eclipse&lt;/p&gt;
&lt;h3 id=&quot;5-生成-jni-文件&quot;&gt;&lt;a href=&quot;#5-生成-jni-文件&quot; class=&quot;headerlink&quot; title=&quot;5. 生成 jni 文件&quot;&gt;&lt;/a&gt;5. 生成 jni 文件&lt;/h3&gt;&lt;p&gt;在 native 方法名上，按 &lt;code&gt;Option ＋ Enter&lt;/code&gt; 键根据提示选择第一项 Create function …，Android Studio 会自动为我们生成相应的 c 文件，及方法签名等信息，方便我们编写 native 代码。&lt;/p&gt;
&lt;h3 id=&quot;6-编写-native-代码，加载-jni-库，运行调试&quot;&gt;&lt;a href=&quot;#6-编写-native-代码，加载-jni-库，运行调试&quot; class=&quot;headerlink&quot; title=&quot;6. 编写 native 代码，加载 jni 库，运行调试&quot;&gt;&lt;/a&gt;6. 编写 native 代码，加载 jni 库，运行调试&lt;/h3&gt;&lt;p&gt;同 Eclipse，Android Studio 会自动帮我们编译 native 代码，无需手动编译&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;之前也曾看过一些介绍 NDK 的文章，但是由于嫌（tuo）麻（yan）烦（zheng）一直没有实践过，这两天读了些文章和文档，打算把 NDK 的项目搭建的一些东西整理一下。&lt;/p&gt;
&lt;p&gt;本文主要介绍 Eclipse 下和 Android Studio 下 NDK 开发环境的搭建。&lt;/p&gt;
    
    </summary>
    
    
      <category term="NDK" scheme="https://wsxyeah.github.io/tags/NDK/"/>
    
  </entry>
  
  <entry>
    <title>Android 异步加载数据方式整理</title>
    <link href="https://wsxyeah.github.io/2015/11/22/android-async/"/>
    <id>https://wsxyeah.github.io/2015/11/22/android-async/</id>
    <published>2015-11-22T02:43:12.000Z</published>
    <updated>2016-04-04T00:24:24.000Z</updated>
    
    <content type="html">&lt;p&gt;在 Android 中，由于主线程负责维护 UI，不能被阻塞，那么在通过磁盘或者网络进行异步加载数据的时候就需要使用多线程了。以下是我整理的几种使用多线程执行异步操作的方式，如有纰漏欢迎指正。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;1-Handler&quot;&gt;&lt;a href=&quot;#1-Handler&quot; class=&quot;headerlink&quot; title=&quot;1. Handler&quot;&gt;&lt;/a&gt;1. Handler&lt;/h2&gt;&lt;p&gt;   Android 中多线程通信基本的方式是使用 Handler 机制，基本使用方式如下。&lt;/p&gt;
   &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//init handler on the original thread&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class OriginalThread extends Thread &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; public Handler mHandler;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; public void run() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Looper.prepare();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   mHandler = new Handler() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     public void handleMessage(Message msg) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     	// process incoming messages here&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Looper.loop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//send message to the original thread&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mHandler.post(Runnable);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mHandler.postAtTime(Runnable, long);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mHandler.postDelayed(Runnable, long);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mHandler.sendEmptyMessage(int);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mHandler.sendMessage(Message);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mHandler.sendMessageAtTime(Message, long);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mHandler.sendMessageDelayed(Message, long);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;   系统还内置了AsyncQueryHandler 辅助子类，方便使用 ContentResolver 进行异步查询操作。&lt;/p&gt;
&lt;p&gt;   关于 Handler，需要注意的是，当 Handler 被声明为 Activity 的非静态内部类时， Handler 会持有外部 Activity 实例的引用，Handler 生命周期比 Activity 长时会导致 Activity 实例不能被正常释放，从而引起内存泄漏。一种解决方式是将 Handler 声明为 Activity 的静态内部类或者单独的类，在 Handler 内部使用 WeakReference/SoftReference 保存对 Activity的引用，既能访问 Activity 的 View 更新 UI，又可以避免内存泄漏。&lt;/p&gt;
&lt;h2 id=&quot;2-AsyncTask&quot;&gt;&lt;a href=&quot;#2-AsyncTask&quot; class=&quot;headerlink&quot; title=&quot;2. AsyncTask&quot;&gt;&lt;/a&gt;2. AsyncTask&lt;/h2&gt;&lt;p&gt;   AsyncTask 方式是官方提供的用来简化手动写 Handler 的一种异步机制，其内部仍使用 Handler 实现。&lt;/p&gt;
&lt;p&gt;   需要继承AsyncTask&lt;params, progress,=&quot;&quot; result=&quot;&quot;&gt;类，重写doInBackground，onPostExecute等回调方法，使用的时候调用 execute 方法（只能在 UI 线程调用）传入参数就可以方便的执行 IO 或网络等耗时操作并在操作完成时更新 UI。&lt;/params,&gt;&lt;/p&gt;
&lt;p&gt;   使用 AsyncTask 同样需要注意内存泄漏问题。&lt;/p&gt;
&lt;h2 id=&quot;3-Activity-runOnUiThread-Runnable-action&quot;&gt;&lt;a href=&quot;#3-Activity-runOnUiThread-Runnable-action&quot; class=&quot;headerlink&quot; title=&quot;3. Activity.runOnUiThread(Runnable action)&quot;&gt;&lt;/a&gt;3. Activity.runOnUiThread(Runnable action)&lt;/h2&gt;&lt;p&gt;   算是 Handler 方式的一种语法糖吧，使用了 Activity 自身维护的 一个 mHandler 实例，便于在 UI 线程执行操作，比如异步获取数据后更新 UI。&lt;/p&gt;
&lt;h2 id=&quot;4-Loader&quot;&gt;&lt;a href=&quot;#4-Loader&quot; class=&quot;headerlink&quot; title=&quot;4. Loader&quot;&gt;&lt;/a&gt;4. Loader&lt;/h2&gt;&lt;p&gt;   Loader 是在 Android 3.0 引入的用于在 Activity 和 Fragment 中简化异步加载数据的方式。&lt;/p&gt;
&lt;p&gt;   系统提供了 AsyncTaskLoader&lt;d&gt; 和 CursorLoader 两个子类。&lt;/d&gt;&lt;/p&gt;
&lt;h2 id=&quot;5-View-post-Runnable-action-View-postDelayed-Runnable-action-long-delayMillis&quot;&gt;&lt;a href=&quot;#5-View-post-Runnable-action-View-postDelayed-Runnable-action-long-delayMillis&quot; class=&quot;headerlink&quot; title=&quot;5. View.post(Runnable action)/View.postDelayed(Runnable action, long delayMillis)&quot;&gt;&lt;/a&gt;5. View.post(Runnable action)/View.postDelayed(Runnable action, long delayMillis)&lt;/h2&gt;&lt;h2 id=&quot;6-RxJava&quot;&gt;&lt;a href=&quot;#6-RxJava&quot; class=&quot;headerlink&quot; title=&quot;6. RxJava&quot;&gt;&lt;/a&gt;6. RxJava&lt;/h2&gt;&lt;p&gt;   使用 RxJava 可以方便地进行多线程调度，通过调用 Observable.subscribeOn 和 Observable.observeOn，并使用 Schedulers.io() 和 Schedulers.mainThread() 等工厂方法传入参数即可自由切换线程。&lt;/p&gt;
&lt;h2 id=&quot;7-EventBus&quot;&gt;&lt;a href=&quot;#7-EventBus&quot; class=&quot;headerlink&quot; title=&quot;7. EventBus&quot;&gt;&lt;/a&gt;7. EventBus&lt;/h2&gt;&lt;p&gt;   使用 EventBus 可以在任意线程发布数据，并通过订阅方法的命名约定规定在何种线程执行订阅的回调方法。&lt;/p&gt;
   &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// Called in the same thread (default)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void onEvent(MessageEvent event) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	log(event.message);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Called in Android UI&amp;apos;s main thread&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void onEventMainThread(MessageEvent event) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	textField.setText(event.message);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Called in the background thread&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void onEventBackgroundThread(MessageEvent event)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	saveToDisk(event.message);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Called in a separate thread&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void onEventAsync(MessageEvent event)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	backend.send(event.message);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在 Android 中，由于主线程负责维护 UI，不能被阻塞，那么在通过磁盘或者网络进行异步加载数据的时候就需要使用多线程了。以下是我整理的几种使用多线程执行异步操作的方式，如有纰漏欢迎指正。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Async" scheme="https://wsxyeah.github.io/tags/Async/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://wsxyeah.github.io/2015/11/06/hello-world/"/>
    <id>https://wsxyeah.github.io/2015/11/06/hello-world/</id>
    <published>2015-11-06T02:47:20.000Z</published>
    <updated>2016-04-04T00:23:01.000Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;http://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;http://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;http://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;http://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;http://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;http://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;http://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;http://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;http://hexo.io
    
    </summary>
    
    
  </entry>
  
</feed>
