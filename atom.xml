<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王少星的个人博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wsxyeah.github.io/"/>
  <updated>2017-04-05T03:38:15.000Z</updated>
  <id>https://wsxyeah.github.io/</id>
  
  <author>
    <name>王少星</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Marshmallow Runtime Permissions</title>
    <link href="https://wsxyeah.github.io/2017/04/05/Marshmallow-Runtime-Permissions/"/>
    <id>https://wsxyeah.github.io/2017/04/05/Marshmallow-Runtime-Permissions/</id>
    <published>2017-04-05T02:06:33.000Z</published>
    <updated>2017-04-05T03:38:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>从 Android 6.0 （API 23） 开始系统开始将应用权限收紧，将权限分为普通（Normal Permissions）权限与危险权限（Dangerous Permissions）。</p>
<p>普通权限不会影响到用户的隐私，只要像以往那样在 manifest 中声明即可使用。<br>危险权限不仅要在 manifest 中声明，而且需要获得用户的批准。虽然可以临时将 target API 设置在 23 以下规避，但一来用户仍然可以在系统设置中强制拒绝授予权限造成应用崩溃，二来也并非长久之计。</p>
<a id="more"></a>
<h1 id="危险权限及分组"><a href="#危险权限及分组" class="headerlink" title="危险权限及分组"></a>危险权限及分组</h1><p>系统分组处理危险权限的授予，如果应用已经获得某个组内的某项权限，那么也就默认获得了该组内的其他权限。比如我们已经获得了 <code>READ_CONTACTS</code> 权限，那么相当于 <code>CONTACTS</code> 组内的 <code>WRITE_CONTACTS</code> 和 <code>GET_ACCOUNTS</code> 权限也获得了。</p>
<table>
<thead>
<tr>
<th>Permission Group</th>
<th>Permissions</th>
</tr>
</thead>
<tbody>
<tr>
<td>CALENDAR</td>
<td><div>READ_CALENDAR</div><div>WRITE_CALENDAR</div></td>
</tr>
<tr>
<td>CAMERA</td>
<td>CAMERA</td>
</tr>
<tr>
<td>CONTACTS</td>
<td><div>READ_CONTACTS</div><div>WRITE_CONTACTS</div><div>GET_ACCOUNTS</div></td>
</tr>
<tr>
<td>LOCATION</td>
<td><div>ACCESS_FINE_LOCATION</div><div>ACCESS_COARSE_LOCATION</div></td>
</tr>
<tr>
<td>MICROPHONE</td>
<td>RECORD_AUDIO</td>
</tr>
<tr>
<td>PHONE</td>
<td><div>READ_PHONE_STATE</div><div>CALL_PHONE</div><div>READ_CALL_LOG</div><div>WRITE_CALL_LOG</div><div>ADD_VOICEMAIL</div><div>USE_SIP</div><div>PROCESS_OUTGOING_CALLS</div></td>
</tr>
<tr>
<td>SENSORS</td>
<td>BODY_SENSORS</td>
</tr>
<tr>
<td>SMS</td>
<td><div>SEND_SMS</div><div>RECEIVE_SMS</div><div>READ_SMS</div><div>RECEIVE_WAP_PUSH</div><div>RECEIVE_MMS</div></td>
</tr>
<tr>
<td>STORAGE</td>
<td><div>READ_EXTERNAL_STORAGE</div><div>WRITE_EXTERNAL_STORAGE</div></td>
</tr>
</tbody>
</table>
<h1 id="基本-API-使用"><a href="#基本-API-使用" class="headerlink" title="基本 API 使用"></a>基本 API 使用</h1><p>与运行时权限相关的 API 主要有以下几个方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Context/ContextCompat</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">checkSelfPermission</span> <span class="params">(String permission)</span></span></div><div class="line"><span class="comment">// Activity/ActivityCompat</span></div><div class="line"><span class="keyword">boolean</span> <span class="title">shouldShowRequestPermissionRationale</span> <span class="params">(String permission)</span></div><div class="line"><span class="keyword">void</span> <span class="title">requestPermissions</span> <span class="params">(String[] permissions, <span class="keyword">int</span> requestCode)</span></div><div class="line"><span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span> <span class="params">(<span class="keyword">int</span> requestCode, String[] permissions, <span class="keyword">int</span>[] grantResults)</span></div></pre></td></tr></table></figure>
<p><code>checkSelfPermission</code> 方法用来检测是否已经获得某项权限，返回结果为<code>PackageManager.PERMISSION_GRANTED</code> 或 <code>PackageManager.PERMISSION_DENIED</code> 。</p>
<p><code>shouldShowRequestPermissionRationale</code> 表示应用是否应该向用户解释为何需要权限。未请求过该权限时返回 false。</p>
<p><code>requestPermissions</code> 执行请求权限的实际操作，在调用该方法时，系统弹出对话框让用户选择是否允许获取所请求的权限。<br>如果用户选择了 Never ask again 并拒绝授予，那么之后调用 <code>requestPermissions</code> 请求该权限直接会被拒绝，<code>shouldShowRequestPermissionRationale</code> 都会返回 false。</p>
<p><code>onRequestPermissionsResult</code> 方法是 Activity 的一个回调方法，类似于 <code>onActivityResult</code>，返回权限请求的结果。</p>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (ActivityCompat.checkSelfPermission(<span class="keyword">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">    <span class="comment">// 未获得该权限</span></div><div class="line">    <span class="keyword">if</span> (ActivityCompat.shouldShowRequestPermissionRationale(<span class="keyword">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE)) &#123;</div><div class="line">        <span class="comment">// 被拒绝过，向用户解释为何需要该权限后再请求</span></div><div class="line">        showPermissionExplanation();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 之前从未请求过该权限或被永久拒绝，直接发起请求</span></div><div class="line">        ActivityCompat.requestPermissions(<span class="keyword">this</span>,</div><div class="line">                <span class="keyword">new</span> String[]&#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;,</div><div class="line">                PERMISSION_REQUEST_STORAGE);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</div><div class="line">    <span class="keyword">if</span> (requestCode == PERMISSION_REQUEST_STORAGE) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; permissions.length; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (Manifest.permission.WRITE_EXTERNAL_STORAGE.equals(permissions[i])) &#123;</div><div class="line">                <span class="keyword">if</span> (PackageManager.PERMISSION_GRANTED == grantResults[i]) &#123;</div><div class="line">                    <span class="comment">// 成功获得权限</span></div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// 被拒绝</span></div><div class="line">                    <span class="comment">// 如果该权限必须的话，可以检查 shouldShowRequestPermissionRationale</span></div><div class="line">                    <span class="comment">// 若返回 true，表示用户永久拒绝，可以引导用户在系统设置中重新授予权限</span></div><div class="line">                    <span class="keyword">if</span> (!ActivityCompat.shouldShowRequestPermissionRationale(<span class="keyword">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE)) &#123;</div><div class="line">                        showPermissionGuide();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://developer.android.com/training/permissions/requesting.html" target="_blank">Requesting Permissions at Run Time</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从 Android 6.0 （API 23） 开始系统开始将应用权限收紧，将权限分为普通（Normal Permissions）权限与危险权限（Dangerous Permissions）。&lt;/p&gt;
&lt;p&gt;普通权限不会影响到用户的隐私，只要像以往那样在 manifest 中声明即可使用。&lt;br&gt;危险权限不仅要在 manifest 中声明，而且需要获得用户的批准。虽然可以临时将 target API 设置在 23 以下规避，但一来用户仍然可以在系统设置中强制拒绝授予权限造成应用崩溃，二来也并非长久之计。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Gradle for Android 笔记</title>
    <link href="https://wsxyeah.github.io/2017/01/18/gradle-for-android/"/>
    <id>https://wsxyeah.github.io/2017/01/18/gradle-for-android/</id>
    <published>2017-01-18T08:03:36.000Z</published>
    <updated>2017-01-18T08:08:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h1><ul>
<li>DSL</li>
<li>based on Groovy</li>
<li><code>{}</code>：闭包</li>
</ul>
<a id="more"></a>
<h1 id="Gradle-for-Android"><a href="#Gradle-for-Android" class="headerlink" title="Gradle for Android"></a>Gradle for Android</h1><ul>
<li>用 V 表示集合 Build Variants，T 表示集合 Build Types，F 表示集合 Product Flavors，则 V = T × F。</li>
<li>e.g.</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// app/build.gradle</span></div><div class="line">apply plugin: <span class="string">'com.android.application'</span></div><div class="line"></div><div class="line">android &#123; <span class="comment">// 当我们在写一个一个的 `&#123;&#125;` 时，其实就是在调用函数，并传一个闭包进去</span></div><div class="line">    compileSdkVersion <span class="number">25</span></div><div class="line">    buildToolsVersion <span class="string">"23.0.2"</span></div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId <span class="string">"me.sxwang.explore"</span></div><div class="line">        minSdkVersion <span class="number">15</span></div><div class="line">        targetSdkVersion <span class="number">25</span></div><div class="line">        versionCode <span class="number">1</span></div><div class="line">        versionName <span class="string">"1.0"</span></div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            minifyEnabled <span class="keyword">false</span></div><div class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></div><div class="line">            manifestPlaceholders = [CHANNEL: <span class="string">"official"</span>]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 这里的 productFlavors 对应</span></div><div class="line">    <span class="comment">// void productFlavors(Action&lt;? super NamedDomainObjectContainer&lt;ProductFlavor&gt;&gt; action)</span></div><div class="line">    <span class="comment">// 方法，执行该方法内部会调用 action.execute(produtFlavors)。</span></div><div class="line">    <span class="comment">// productFlavors 的实际类型为 NamedDomainObjectContainer&lt;ProductFlavor&gt;，</span></div><div class="line">    <span class="comment">// NamedDomainObjectContainer 是 Gradle 中定义的一个接口</span></div><div class="line">    <span class="comment">// （https://docs.gradle.org/current/dsl/org.gradle.api.NamedDomainObjectContainer.html），</span></div><div class="line">    <span class="comment">// 闭包内的代码通过 create(name, configureClosure) ／getByName(name, configureClosure) </span></div><div class="line">    <span class="comment">// 方法实现了对 productFlavors 的配置</span></div><div class="line">    productFlavors &#123;</div><div class="line">        wandoujia &#123;</div><div class="line">            manifestPlaceholders = [CHANNEL: <span class="string">"wandoujia"</span>]</div><div class="line">        &#125;</div><div class="line">        xiaomi &#123;</div><div class="line">            manifestPlaceholders = [CHANNEL: <span class="string">"xiaomi"</span>]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 这里的 productFlavors 对应调用 getProductFlavors() 方法，返回类型为 Collection&lt;ProductFlavor&gt;，</span></div><div class="line">    <span class="comment">// Collection 是 Groovy JDK 提供的类（http://docs.groovy-lang.org/latest/html/groovy-jdk/java/util/Collection.html）</span></div><div class="line">    <span class="comment">// each() 方法遍历集合中的所有元素，在 Collection 中定义</span></div><div class="line">    <span class="comment">// 可见这里使用 each() 仅对前面已经创建的 product flavors 生效</span></div><div class="line">    productFlavors.<span class="keyword">each</span> &#123; flavor -&gt;</div><div class="line">        <span class="keyword">println</span>(<span class="string">"====&gt; Configuring productFlavor: $&#123;flavor.name&#125;"</span>)</div><div class="line">        flavor.manifestPlaceholders = [CHANNEL: flavor.name]</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// applicationVariants 为 DomainObjectSet&lt;ApplicationVariant&gt; 类型，</span></div><div class="line">    <span class="comment">// 虽然也是 Collection 类型，但是此时其集合元素为空，故使用 each() 无效。</span></div><div class="line">    <span class="comment">// 当然 DomainObjectSet 也实现了另一个接口 DomainObjectCollection，接口中定义的</span></div><div class="line">    <span class="comment">// all() 方法保证对于后续添加的所有元素都会生效</span></div><div class="line">    applicationVariants.all &#123; variant -&gt;</div><div class="line">        <span class="keyword">println</span>(<span class="string">"====&gt; Configuring variant: $&#123;variant.name&#125;"</span>)</div><div class="line">        variant.assemble.dependsOn.<span class="keyword">each</span> &#123; dependency -&gt;</div><div class="line">            <span class="keyword">println</span>(dependency)</div><div class="line">        &#125;</div><div class="line">        variant.outputs.<span class="keyword">each</span> &#123; output -&gt;</div><div class="line">            output.outputFile = <span class="keyword">new</span> <span class="keyword">File</span>(output.outputFile.parent, <span class="string">"x-$&#123;variant.name&#125;.apk"</span>)</div><div class="line">        &#125;</div><div class="line">        variant.assemble.<span class="keyword">doFirst</span> &#123;</div><div class="line">            <span class="keyword">println</span>(<span class="string">"====&gt; doFirst: $&#123;variant.name&#125;"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:25.1.0'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:design:25.1.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><p><a target="_blank" href="http://docs.groovy-lang.org/latest/html/groovy-jdk/">Groovy JDK API Documentation</a></p>
</li>
<li><p><a target="_blank" href="https://docs.gradle.org/current/dsl/">Gradle Build Language Reference</a></p>
</li>
<li><p><a target="_blank" href="https://docs.gradle.org/current/userguide/userguide.html">Gradle User Guide</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Gradle&quot;&gt;&lt;a href=&quot;#Gradle&quot; class=&quot;headerlink&quot; title=&quot;Gradle&quot;&gt;&lt;/a&gt;Gradle&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;DSL&lt;/li&gt;
&lt;li&gt;based on Groovy&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{}&lt;/code&gt;：闭包&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java 的包装类型，自动装箱与拆箱</title>
    <link href="https://wsxyeah.github.io/2016/11/01/java-wrapper-classes/"/>
    <id>https://wsxyeah.github.io/2016/11/01/java-wrapper-classes/</id>
    <published>2016-11-01T13:46:43.000Z</published>
    <updated>2016-11-02T00:22:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>Java 作为一门面向对象的语言，仍然保留了基本的几种值类型（int，short，long，byte，char，boolean，float，double）。当然为了方便开发人员使用也提供了对应的包装类，（Integer，Short，Long，Byte，Char，Boolean，Float，Double），并且在 Java 1.5 中开始提供了自动装箱（boxing）和拆箱（unboxing）特性。</p>
<p>自动装箱的主要作用是方便在值类型和包装类型之间切换，比如可以直接在源代码里将值类型赋值给包装类型或反之，使用 == 来比较值类型和包装类型的值。这里提到是源代码里这样做是因为自动装箱／拆箱特性主要由编译器帮我们完成。<br><a id="more"></a></p>
<p>当我们编写以下一段程序时</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a = <span class="keyword">new</span> Integer(<span class="number">5</span>);</div><div class="line">Integer b = <span class="number">6</span>;</div><div class="line"><span class="keyword">assert</span>(a == b);</div></pre></td></tr></table></figure>
<ul>
<li>其中第一行代码需要将包装类型赋值给值类型，编译器会生成等效于 <code>int a = new Integer(5).intValue();</code> 的代码</li>
<li>对于第二行，则有 <code>Integer b = Integer.valueOf(6);</code></li>
<li>而对于值类型与包装类型的比较，则会先将包装类型转为基本类型，即 <code>assert(a.intValue() == b);</code></li>
</ul>
<p>关于包装类型的缓存<br>根据 Java 语言规范（JLS8，§5.1.7），包装类型会对部分值做缓存，在像 <code>Integer.valueOf(int)</code> 这样的方法中起作用，所以会出现 <code>Integer a = 5; Integer b = 5; assert(a == b);</code> 的情况。</p>
<blockquote>
<p>If the value p being boxed is an integer literal of type int between -128 and 127 inclusive (§3.10.1), or the boolean literal true or false (§3.10.3), or a character literal between ‘\u0000’ and ‘\u007f’ inclusive (§3.10.4), then let a and b be the results of any two boxing conversions of p. It is always the case that a == b.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java 作为一门面向对象的语言，仍然保留了基本的几种值类型（int，short，long，byte，char，boolean，float，double）。当然为了方便开发人员使用也提供了对应的包装类，（Integer，Short，Long，Byte，Char，Boolean，Float，Double），并且在 Java 1.5 中开始提供了自动装箱（boxing）和拆箱（unboxing）特性。&lt;/p&gt;
&lt;p&gt;自动装箱的主要作用是方便在值类型和包装类型之间切换，比如可以直接在源代码里将值类型赋值给包装类型或反之，使用 == 来比较值类型和包装类型的值。这里提到是源代码里这样做是因为自动装箱／拆箱特性主要由编译器帮我们完成。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>迁移 NDK 项目到 Gradle</title>
    <link href="https://wsxyeah.github.io/2016/09/21/ndk-with-grale/"/>
    <id>https://wsxyeah.github.io/2016/09/21/ndk-with-grale/</id>
    <published>2016-09-21T03:18:49.000Z</published>
    <updated>2016-11-01T13:44:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>这几天 Android Studio 2.2 终于出了稳定版，完善了对 NDK 的支持，真可谓是「开发者的大事，大快所有人心的大好事」。</p>
<h2 id="NDK-集成"><a href="#NDK-集成" class="headerlink" title="NDK 集成"></a>NDK 集成</h2><p>这次 Android Studio 不但支持传统 NDK 项目的集成，同时也支持使用 Cmake 来组织 NDK 代码。Cmake 项目可以在 Gradle 做如下配置<br><a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">externalNativeBuild&#123;</div><div class="line">   cmake&#123;</div><div class="line">        path &quot;CMakeLists.txt&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">defaultConfig &#123;</div><div class="line">  externalNativeBuild &#123;</div><div class="line">    cmake &#123;</div><div class="line">      targets &quot;target1&quot;, &quot;target2&quot;</div><div class="line">      arguments &quot;-DANDROID_TOOLCHAIN=clang&quot;</div><div class="line">      cFlags &quot;-DTEST_C_FLAG1&quot;, &quot;-DTEST_C_FLAG2&quot;</div><div class="line">      cppFlags &quot;-DTEST_CPP_FLAG2&quot;, &quot;-DTEST_CPP_FLAG2&quot;</div><div class="line">      abiFilters &quot;armeabi-v7a&quot;, &quot;armeabi&quot;</div><div class="line">    &#125; </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于传统的 NDK 项目现在可以在 Gradle 里添加如下配置块</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">externalNativeBuild&#123;</div><div class="line">   ndkBuild&#123;</div><div class="line">        path &quot;Android.mk&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">defaultConfig &#123;</div><div class="line">  externalNativeBuild &#123;</div><div class="line">    ndkBuild &#123;</div><div class="line">      targets &quot;target1&quot;, &quot;target2&quot;</div><div class="line">      arguments &quot;NDK_APPLICATION_MK:=Application.mk&quot;</div><div class="line">      cFlags &quot;-DTEST_C_FLAG1&quot;, &quot;-DTEST_C_FLAG2&quot;</div><div class="line">      cppFlags &quot;-DTEST_CPP_FLAG2&quot;, &quot;-DTEST_CPP_FLAG2&quot;</div><div class="line">      abiFilters &quot;armeabi-v7a&quot;, &quot;armeabi&quot;</div><div class="line">    &#125; </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>path</code> Android.mk 文件的路径，可以使用相对路径</p>
<p><code>targets</code> 用来过滤需要打包进 apk 的库，可以针对不同的 product flavor 做配置。只有这里指定的 targets 才会被打包，若未配置则全部打包</p>
<p><code>abiFilters</code> 这里最好还是再指定一次，Application.mk 里指定的似乎会被忽略。如果 NDK 项目依赖一些平台相关的库或代码并且只有部分平台的依赖，这时会报找不到文件的错误，其实是没有设置 abiFilters 导致它会去找所有平台的文件</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>完成配置并同步 Gradle 之后，在该模块的目录下会生成一个 <code>.externalNativeBuild</code> 目录，目录结构为 <code>.externalNativeBuild/ndkBuild/${ProductFlavor}/${abi}/</code>。<br>里面是生成的构建脚本，包含三个文件。指定了 Android.mk 及 Application.mk 的位置，ndk-build 命令，编译参数及 toolchains 配置。<br>并且从生成的脚本中也可以看出这里已经可以根据 Gradle 中的 Debug/Release 模式生成相应的编译命令了。</p>
<ul>
<li>android_gradle_build.json</li>
<li>ndkBuild_build_command.txt</li>
<li>ndkBuild_build_output.txt</li>
</ul>
<p>如此看来 Gradle 采取的是根据我们的配置生成对应的脚本，在外部执行编译脚本，再将结果进行打包的策略，这样便使原来的项目无缝迁移，同时也为 Cmake 这样的组织方式提供了扩展。</p>
<p>另外现在可以针对不同渠道做定制了。可以通过在编译器参数中定义宏的方式将参数传进 JNI 中，再在 JNI 代码中做对应处理。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="https://developer.android.com/studio/projects/add-native-code.html" target="_blank" rel="external">Add C and C++ Code to Your Project</a></li>
<li><a href="http://android-developers.blogspot.com/2016/09/android-studio-2-2.html" target="_blank" rel="external">Android Studio 2.2</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这几天 Android Studio 2.2 终于出了稳定版，完善了对 NDK 的支持，真可谓是「开发者的大事，大快所有人心的大好事」。&lt;/p&gt;
&lt;h2 id=&quot;NDK-集成&quot;&gt;&lt;a href=&quot;#NDK-集成&quot; class=&quot;headerlink&quot; title=&quot;NDK 集成&quot;&gt;&lt;/a&gt;NDK 集成&lt;/h2&gt;&lt;p&gt;这次 Android Studio 不但支持传统 NDK 项目的集成，同时也支持使用 Cmake 来组织 NDK 代码。Cmake 项目可以在 Gradle 做如下配置&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JNI 开发中字符编码的一点坑</title>
    <link href="https://wsxyeah.github.io/2016/07/23/jni-charset-encoding/"/>
    <id>https://wsxyeah.github.io/2016/07/23/jni-charset-encoding/</id>
    <published>2016-07-23T09:39:06.000Z</published>
    <updated>2016-07-23T09:43:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><p>JNI 开发中 Java 层向下传字符串比较常用的是 JNIEnv 的 GetStringUTFChars 方法将 <code>jstring</code> 转为 <code>const char *</code>，用完后使用 ReleaseStringUTFChars 方法释放。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">const</span> jchar * <span class="title">GetStringChars</span><span class="params">(JNIEnv *env, jstring <span class="built_in">string</span>,</span></span></div><div class="line">jboolean *isCopy);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReleaseStringChars</span><span class="params">(JNIEnv *env, jstring <span class="built_in">string</span>,</span></span></div><div class="line"><span class="keyword">const</span> jchar *chars);</div></pre></td></tr></table></figure>
<p>然而使用该方法返回的字符串却并非采用标准 UTF-8 编码，而是Modified UTF-8 Strings，即一种修改过的 UTF-8 编码。</p>
<a id="more"></a>
<p>标准的 UTF-8 编码以 8-bit 即一个字节为基本单位，一个字符可以由一到六个字节编码表示，只要留出每个字节的高几位作为标志位就可以表示出该字节的类型，这样就可以判断出其后有几个字节与该字节合在一起表示一个字符。比如最高位为 <code>0</code> 表示该字节单独表示一个字符；最高两位为 <code>10</code> 表示该字节是跟在其他字节后面的，仅包含数据；最高三位为 <code>110</code> 则表示它将与后一个字节共同表示同一字符。</p>
<p>在 Modified UTF-8 Strings 中，<code>U+FFFF</code> 以上编码的字符（比如 Emoji 字符）并没有继续遵循 UTF-8 编码的规则，而是将其拆分为两个部分，分别使用三个字节存放，共六个字节。但这样也就导致了使用 UTF-8 编码解析的话便将会其识别为两个字符。</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>主要有的解决思路有两种，一种是使用 UTF-16 编码，系统提供了对应的 GetStringChars 和 ReleaseStringChars 方法。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">const</span> jchar * <span class="title">GetStringChars</span><span class="params">(JNIEnv *env, jstring <span class="built_in">string</span>,</span></span></div><div class="line">jboolean *isCopy);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReleaseStringChars</span><span class="params">(JNIEnv *env, jstring <span class="built_in">string</span>,</span></span></div><div class="line"><span class="keyword">const</span> jchar *chars);</div></pre></td></tr></table></figure>
<p>另一种是先在 Java 层拿到 UTF-8 编码的字符串 byte[] 数据，再以 jbyteArray 的形式传入。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">byte</span>[] data = str.getBytes(<span class="string">"UTF-8"</span>);</div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jbyteArray _bytes;</span></div><div class="line"><span class="keyword">const</span> jsize length = env-&gt;GetArrayLength(_bytes);</div><div class="line">jbyte *bytes = env-&gt;GetByteArrayElements(_bytes, <span class="number">0</span>);</div><div class="line"></div><div class="line">env-&gt;ReleaseByteArrayElements(_bytes, bytes, JNI_ABORT);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;坑&quot;&gt;&lt;a href=&quot;#坑&quot; class=&quot;headerlink&quot; title=&quot;坑&quot;&gt;&lt;/a&gt;坑&lt;/h2&gt;&lt;p&gt;JNI 开发中 Java 层向下传字符串比较常用的是 JNIEnv 的 GetStringUTFChars 方法将 &lt;code&gt;jstring&lt;/code&gt; 转为 &lt;code&gt;const char *&lt;/code&gt;，用完后使用 ReleaseStringUTFChars 方法释放。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; jchar * &lt;span class=&quot;title&quot;&gt;GetStringChars&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(JNIEnv *env, jstring &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;jboolean *isCopy)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ReleaseStringChars&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(JNIEnv *env, jstring &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; jchar *chars)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然而使用该方法返回的字符串却并非采用标准 UTF-8 编码，而是Modified UTF-8 Strings，即一种修改过的 UTF-8 编码。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu 16.04 下搭建 Samba 服务</title>
    <link href="https://wsxyeah.github.io/2016/05/22/ubuntu-samba-service/"/>
    <id>https://wsxyeah.github.io/2016/05/22/ubuntu-samba-service/</id>
    <published>2016-05-22T12:23:56.000Z</published>
    <updated>2016-05-22T13:00:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近要读源码的时候都要到网页上找，网页跳转不仅速度慢也十分麻烦，于是打算把 AOSP 源码同步到本地。<br>由于我的 Mac 剩余磁盘空间只有 100 多 G 了，就用原来联想的机器（用的是 Ubuntu 16.04）同步了 24GB+ 的 AOSP 源码。并打算在上面搭建 Samba 服务，这样就可以直接在 Mac 上阅读源码了，哈哈。</p>
<a id="more"></a>
<h2 id="安装-Samba"><a href="#安装-Samba" class="headerlink" title="安装 Samba"></a>安装 Samba</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt update &amp;&amp; sudo apt install samba</div></pre></td></tr></table></figure>
<h2 id="选择共享目录"><a href="#选择共享目录" class="headerlink" title="选择共享目录"></a>选择共享目录</h2><p>直接在 Ubuntu 的文件管理器 GUI 右键菜单里选择 属性 -&gt; 本地文件共享，并勾选<code>共享此目录</code>以及<code>允许其他人来创建和删除这个文件夹里的文件</code>就可以了，系统会为我们自动设置目录的权限及共享配置。</p>
<h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><p>我们可以单独创建一个用户用于登录 Samba 服务。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo useradd smb</div><div class="line">sudo passwd smb</div></pre></td></tr></table></figure>
<p>允许使用该用户登录 Samba 并重启 Samba 服务。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo smbpasswd -a smb &amp;&amp; sudo service smbd restart</div></pre></td></tr></table></figure>
<p>现在只要在 Finder 左侧边栏选择服务器，点击 <code>Connect as</code> 并使用创建的账户登录就可以直接访问共享目录啦。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近要读源码的时候都要到网页上找，网页跳转不仅速度慢也十分麻烦，于是打算把 AOSP 源码同步到本地。&lt;br&gt;由于我的 Mac 剩余磁盘空间只有 100 多 G 了，就用原来联想的机器（用的是 Ubuntu 16.04）同步了 24GB+ 的 AOSP 源码。并打算在上面搭建 Samba 服务，这样就可以直接在 Mac 上阅读源码了，哈哈。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>浅谈 Android 事件分发机制</title>
    <link href="https://wsxyeah.github.io/2016/04/03/touch-event/"/>
    <id>https://wsxyeah.github.io/2016/04/03/touch-event/</id>
    <published>2016-04-03T13:30:04.000Z</published>
    <updated>2016-04-03T23:59:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-形式"><a href="#1-形式" class="headerlink" title="1. 形式"></a>1. 形式</h2><p>Touch 事件被封装成 MotionEvent 对象来传递。<br>由 ACTION_DOWN 开始，经过若干次 ACTION_MOVE 并以 ACTION_UP 结束的一个事件序列称为一个 gesture。</p>
<h2 id="2-角色"><a href="#2-角色" class="headerlink" title="2. 角色"></a>2. 角色</h2><p>涉及 Touch 事件处理的角色有四种：</p>
<ul>
<li>Activity</li>
<li>Window</li>
<li>ViewGroup</li>
<li>View</li>
</ul>
<a id="more"></a>
<h2 id="3-基本流程"><a href="#3-基本流程" class="headerlink" title="3. 基本流程"></a>3. 基本流程</h2><p>事件在 activity 中的分发起始于 <code>dispatchTouchEvent()</code> 方法。从源码可以看出 activity 调用了 Window 的 <code>superDispatchTouchEvent()</code> 方法来处理，若返回值为 true，则结束事件分发，否则调用 <code>onTouchEvent()</code>  方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">		onUserInteraction();</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (getWindow().superDispatchTouchEvent(ev)) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> onTouchEvent(ev);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Window 的实现类为 PhoneWindow，PhoneWindow 实际调用了 DecorView 的 <code>superDispatchTouchEvent()</code>。<br>而 DecorView 是 activity 中的顶级 View，它其实是一个 FrameLayout，它的 <code>superDispatchTouchEvent()</code> 直接调用了 ViewGroup 的 <code>dispatchTouchEvent()</code>。</p>
<p>由此，事件流入 View 层级。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// PhoneWindow</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">superDispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> mDecor.superDispatchTouchEvent(event);</div><div class="line">&#125;</div><div class="line"><span class="comment">// DecorView</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">superDispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(event);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-ViewGroup-dispatchTouchEvent-流程"><a href="#4-ViewGroup-dispatchTouchEvent-流程" class="headerlink" title="4. ViewGroup dispatchTouchEvent() 流程"></a>4. ViewGroup <code>dispatchTouchEvent()</code> 流程</h2><p>事件流入 View 层级后会逐级分发，ViewGroup 处在事件分发的中间层，是事件分发机制中最复杂的部分。此处源码非常长，就不贴出来了。</p>
<p>ACTION_DOWN 事件作为一次 gesture 的开始，可以影响后续事件的传递流程。为了方便理解，这里将它与其他类型的事件分开分析。</p>
<ul>
<li>对于 ACITON_DOWN 事件</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">	<span class="keyword">boolean</span> handled = <span class="keyword">false</span>;</div><div class="line">	</div><div class="line">	<span class="comment">// 1. 作为一次 gesture 的开始，重置状态</span></div><div class="line">	</div><div class="line">	<span class="comment">// 2. 判断是否需要拦截本次事件</span></div><div class="line">	<span class="keyword">final</span> <span class="keyword">boolean</span> intercepted;</div><div class="line">	<span class="keyword">if</span> (!disallowIntercept) &#123;</div><div class="line">		<span class="comment">// 此时 disallowIntercept 已被重置为 false，onInterceptTouchEvent 一定会被调用</span></div><div class="line">		intercepted = onInterceptTouchEvent(ev);</div><div class="line">		ev.setAction(action); <span class="comment">// restore action in case it was changed</span></div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		intercepted = <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">if</span> (!intercepted &amp;&amp; mChildrenCount != <span class="number">0</span>) &#123;</div><div class="line">		<span class="comment">// 3.a 不进行拦截的情况，向下分发</span></div><div class="line">	 	<span class="comment">// 从前面到后面遍历子 View，这里用循环仅简单表示遍历过程</span></div><div class="line">	 	<span class="keyword">for</span> (View child : mChildren) &#123;</div><div class="line">	 		<span class="keyword">if</span> (!canViewReceivePointerEvents(child)</div><div class="line">				|| !isTransformedTouchPointInView(x, y, child, <span class="keyword">null</span>)) &#123;</div><div class="line">				<span class="comment">// 该子 View 不可见或触摸位置不在子 View 边界内，跳过</span></div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="comment">// 变换 MotionEvent 并传给子 View 的 dispatchTouchEvent</span></div><div class="line">			<span class="keyword">if</span> (dispatchTransformedTouchEvent(ev, <span class="keyword">false</span>, child, idBitsToAssign)) &#123;</div><div class="line">				<span class="comment">// 若返回 true，表示该子 View 需要处理此次 gesture 的事件，记录此状态</span></div><div class="line">				handled = <span class="keyword">true</span>;</div><div class="line">			&#125;</div><div class="line">	 	&#125;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="comment">// 3.b 进行拦截的情况，需要自己处理事件</span></div><div class="line">		handled = <span class="keyword">super</span>.dispatchTouchEvent(event);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">return</span> handled;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>对于非 ACITON_DOWN 事件</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">	<span class="keyword">boolean</span> handled = <span class="keyword">false</span>;</div><div class="line">	</div><div class="line">	<span class="comment">// 1. 判断是否需要拦截本次事件</span></div><div class="line">	<span class="keyword">final</span> <span class="keyword">boolean</span> intercepted;</div><div class="line">	<span class="keyword">if</span> (!disallowIntercept) &#123;</div><div class="line">		intercepted = onInterceptTouchEvent(ev);</div><div class="line">		ev.setAction(action); <span class="comment">// restore action in case it was changed</span></div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="comment">// 若之前子 View 调用了 requestDisallowInterceptTouchEvent(true)，则不允许拦截</span></div><div class="line">		intercepted = <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">if</span> (!intercepted &amp;&amp; mChildrenCount != <span class="number">0</span>) &#123;</div><div class="line">		<span class="comment">// 2.a 不进行拦截的情况，向下分发</span></div><div class="line">	 	<span class="comment">// 仅遍历之前记录的子 View（即对 ACTION_DOWN 事件返回 true 的子 View）</span></div><div class="line">	 	<span class="comment">// 这里循环仅简单表示遍历过程，实际上源码是使用链表实现的</span></div><div class="line">	 	<span class="keyword">for</span> (View child : children) &#123;</div><div class="line">			<span class="comment">// 变换 MotionEvent 并传给子 View 的 dispatchTouchEvent</span></div><div class="line">			<span class="keyword">if</span> (dispatchTransformedTouchEvent(ev, <span class="keyword">false</span>, child, idBitsToAssign)) &#123;</div><div class="line">				handled = <span class="keyword">true</span>;</div><div class="line">			&#125;</div><div class="line">	 	&#125;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="comment">// 2.b 进行拦截的情况，需要自己处理事件</span></div><div class="line">		handled = <span class="keyword">super</span>.dispatchTouchEvent(event);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">return</span> handled;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="5-View-dispatchTouchEvent-流程"><a href="#5-View-dispatchTouchEvent-流程" class="headerlink" title="5. View dispatchTouchEvent() 流程"></a>5. View <code>dispatchTouchEvent()</code> 流程</h2><p>View 位于事件分发的最下层，不再向下分发。View 的事件分发逻辑大致等效于 <code>return mOnTouchListener.onTouch(this, e) || onTouchEvent(e);</code>。</p>
<p>View 的 OnClickListener 是在 <code>onTouchEvent()</code> 方法里回调的，所以如果我们为 View 设置了 onTouchListener 并在 <code>onTouch()</code> 里返回 true，那么它的 OnClick 等系统预设的事件会失效。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 简化的 View dispatchTouchEvent 代码</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">	<span class="keyword">boolean</span> result = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">	ListenerInfo li = mListenerInfo;</div><div class="line">	<span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnTouchListener != <span class="keyword">null</span></div><div class="line"> 		&amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED</div><div class="line">		&amp;&amp; li.mOnTouchListener.onTouch(<span class="keyword">this</span>, event)) &#123;</div><div class="line">		result = <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (!result &amp;&amp; onTouchEvent(event)) &#123;</div><div class="line">		result = <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-形式&quot;&gt;&lt;a href=&quot;#1-形式&quot; class=&quot;headerlink&quot; title=&quot;1. 形式&quot;&gt;&lt;/a&gt;1. 形式&lt;/h2&gt;&lt;p&gt;Touch 事件被封装成 MotionEvent 对象来传递。&lt;br&gt;由 ACTION_DOWN 开始，经过若干次 ACTION_MOVE 并以 ACTION_UP 结束的一个事件序列称为一个 gesture。&lt;/p&gt;
&lt;h2 id=&quot;2-角色&quot;&gt;&lt;a href=&quot;#2-角色&quot; class=&quot;headerlink&quot; title=&quot;2. 角色&quot;&gt;&lt;/a&gt;2. 角色&lt;/h2&gt;&lt;p&gt;涉及 Touch 事件处理的角色有四种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Activity&lt;/li&gt;
&lt;li&gt;Window&lt;/li&gt;
&lt;li&gt;ViewGroup&lt;/li&gt;
&lt;li&gt;View&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android 日期解析与格式化</title>
    <link href="https://wsxyeah.github.io/2016/03/13/date-format/"/>
    <id>https://wsxyeah.github.io/2016/03/13/date-format/</id>
    <published>2016-03-13T00:33:39.000Z</published>
    <updated>2016-04-04T00:23:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>Java 中有 <code>java.text.DateFormat</code> 这个类来专门处理日期格式，它的实例仅能通过三个工厂方法获取，然后就可以调用 <code>format()</code> 和 <code>parse()</code> 方法来格式化和解析了。</p>
<ul>
<li><code>DateFormat.getDateInstance([int style[, Locale aLocale]])</code></li>
<li><code>DateFormat.getDateTimeInstance([int dateStyle, int timeStyle[, Locale aLocale]])</code></li>
<li><code>DateFormat.getTimeInstance([int style[, Locale aLocale]])</code></li>
</ul>
<p>其中的 style 可以是 SHORT， MEDIUM， LONG 或者 FULL。</p>
<ul>
<li>SHORT is completely numeric, such as 12.13.52 or 3:30pm</li>
<li>MEDIUM is longer, such as Jan 12, 1952</li>
<li>LONG is longer, such as January 12, 1952 or 3:30:32pm</li>
<li>FULL is pretty completely specified, such as Tuesday, April 12, 1952 AD or 3:30:42pm PST.</li>
</ul>
<a id="more"></a>
<p>我们常用的是其子类 <code>SimpleDateFormat</code>，它可以直接传入一个字符串 pattern 来定义格式，详细文档可以看这里 <a href="http://developer.android.com/intl/zh-cn/reference/java/text/SimpleDateFormat.html" target="_blank" rel="external">http://developer.android.com/intl/zh-cn/reference/java/text/SimpleDateFormat.html</a>。</p>
<p><strong>坑出没注意</strong><br><strong>如果要解析的日期字符串不是纯数字（比如含有用文字表示的的月份或者周几）的话，一定要记得传入 Locale。</strong></p>
<p>另外一种日期的格式化问题就是弄成那种像 <code>2小时前</code>，<code>1天前</code> 这样的格式。Android 其实自带了一个 <code>DataUtils</code> 类来处理这种格式。</p>
<p><code>formatDateRange()</code> 可以格式化时间段，比如 <code>3:00pm - 4:00pm</code>，或者 <code>Dec 31, 2007 - Jan 1, 2008</code>。<br><code>formatElapsedTime()</code> 可以传入秒数，格式化成 <code>MM:SS</code> 或 <code>H:MM:SS</code>。<br><code>formatSameDayTime</code> 需要传入 now 参数，对在同一天的时间显示时间，不是同一天则仅显示日期。<br><code>getRelativeDateTimeString()</code> 就是我们常见的 <code>2小时前</code> 格式了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java 中有 &lt;code&gt;java.text.DateFormat&lt;/code&gt; 这个类来专门处理日期格式，它的实例仅能通过三个工厂方法获取，然后就可以调用 &lt;code&gt;format()&lt;/code&gt; 和 &lt;code&gt;parse()&lt;/code&gt; 方法来格式化和解析了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DateFormat.getDateInstance([int style[, Locale aLocale]])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DateFormat.getDateTimeInstance([int dateStyle, int timeStyle[, Locale aLocale]])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DateFormat.getTimeInstance([int style[, Locale aLocale]])&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中的 style 可以是 SHORT， MEDIUM， LONG 或者 FULL。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SHORT is completely numeric, such as 12.13.52 or 3:30pm&lt;/li&gt;
&lt;li&gt;MEDIUM is longer, such as Jan 12, 1952&lt;/li&gt;
&lt;li&gt;LONG is longer, such as January 12, 1952 or 3:30:32pm&lt;/li&gt;
&lt;li&gt;FULL is pretty completely specified, such as Tuesday, April 12, 1952 AD or 3:30:42pm PST.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>我对 Android 消息机制的思考</title>
    <link href="https://wsxyeah.github.io/2016/03/03/thinking-about-handler/"/>
    <id>https://wsxyeah.github.io/2016/03/03/thinking-about-handler/</id>
    <published>2016-03-03T13:00:42.000Z</published>
    <updated>2016-11-24T13:43:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android 中线程间通信消息机制的基本思想其实很简单：为目标线程建立一个消息循环用来“监听”消息，之后我们只要在其他线程中向目标线程发送消息就可以被目标线程接收并处理，这样就完成了两个线程之间的通信。</p>
<p>下面我们一步一步来分析这个机制的实现（以下源码均基于 SDK 23）。</p>
<a id="more"></a>
<h2 id="1-为目标线程建立一个消息循环用来“监听”消息"><a href="#1-为目标线程建立一个消息循环用来“监听”消息" class="headerlink" title="1. 为目标线程建立一个消息循环用来“监听”消息"></a>1. 为目标线程建立一个消息循环用来“监听”消息</h2><p>我们都知道 Java 中一个线程执行的入口点是它的 <code>run()</code> 方法（或者对应 Runable 对象的 <code>run()</code> 方法），我们要为目标线程建立消息循环就需要在此处进行操作，否则线程代码一下子就执行完了，结束掉了。</p>
<p>这时我们就需要 Looper 来完成这个工作了，从其命名我们就可以看出来它是作为一个“循环器”来使用，它可以方便地为我们的线程建立消息循环。我们在使用 Looper 的时候都是先调用 <code>Looper.prepare()</code> ,然后创建 Handler 作为消息处理器，最后再调用 <code>Looper.loop()</code> 来启动消息循环。</p>
<p>那么 <code>Looper.prepare()</code> 干了些什么事情呢，我们来看一下其源码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/** Initialize the current thread as a looper.</span></div><div class="line">  * This gives you a chance to create handlers that then reference</div><div class="line">  * this looper, before actually starting the loop. Be sure to call</div><div class="line">  * &#123;<span class="doctag">@link</span> #loop()&#125; after calling this method, and end it by calling</div><div class="line">  * &#123;<span class="doctag">@link</span> #quit()&#125;.</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</div><div class="line">    prepare(<span class="keyword">true</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</div><div class="line">    &#125;</div><div class="line">    sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">Looper</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</div><div class="line">    mQueue = <span class="keyword">new</span> MessageQueue(quitAllowed);</div><div class="line">    mThread = Thread.currentThread();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中的 <code>sThreadLocal</code> 是 Looper 类的静态 ThreadLocal 类对象。这里先说明一下 ThreadLocal 的作用，ThreadLocal 就是用来从当前线程对象里存取数据的一个工具类。<br>ThreadLocal 使用 <code>Thread.currentThread()</code> 来获得当前代码所在的线程对象，然后把数据存到线程对象中，get 也是从线程对象里取出来。</p>
<p>我们从源码可以看出来 <strong><code>Looper.prepare()</code> 会向当前线程对象存放一个 Looper 对象</strong>，另外 Looper 对象在创建的时候创建一个 MessageQueue，将其以及当前线程对象作为对象成员。</p>
<p>再来看 Handler 的创建。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Use the &#123;<span class="doctag">@link</span> Looper&#125; for the current thread with the specified callback interface</div><div class="line"> * and set whether the handler should be asynchronous.</div><div class="line"> *</div><div class="line"> * Handlers are synchronous by default unless this constructor is used to make</div><div class="line"> * one that is strictly asynchronous.</div><div class="line"> *</div><div class="line"> * Asynchronous messages represent interrupts or events that do not require global ordering</div><div class="line"> * with respect to synchronous messages.  Asynchronous messages are not subject to</div><div class="line"> * the synchronization barriers introduced by &#123;<span class="doctag">@link</span> MessageQueue#enqueueSyncBarrier(long)&#125;.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> callback The callback interface in which to handle messages, or null.</div><div class="line"> * <span class="doctag">@param</span> async If true, the handler calls &#123;<span class="doctag">@link</span> Message#setAsynchronous(boolean)&#125; for</div><div class="line"> * each &#123;<span class="doctag">@link</span> Message&#125; that is sent to it or &#123;<span class="doctag">@link</span> Runnable&#125; that is posted to it.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@hide</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (FIND_POTENTIAL_LEAKS) &#123;</div><div class="line">        <span class="keyword">final</span> Class&lt;? extends Handler&gt; klass = getClass();</div><div class="line">        <span class="keyword">if</span> ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;</div><div class="line">                (klass.getModifiers() &amp; Modifier.STATIC) == <span class="number">0</span>) &#123;</div><div class="line">            Log.w(TAG, <span class="string">"The following Handler class should be static or leaks might occur: "</span> +</div><div class="line">                klass.getCanonicalName());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mLooper = Looper.myLooper();</div><div class="line">    <span class="keyword">if</span> (mLooper == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">            <span class="string">"Can't create handler inside thread that has not called Looper.prepare()"</span>);</div><div class="line">    &#125;</div><div class="line">    mQueue = mLooper.mQueue;</div><div class="line">    mCallback = callback;</div><div class="line">    mAsynchronous = async;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Use the provided &#123;<span class="doctag">@link</span> Looper&#125; instead of the default one and take a callback</div><div class="line"> * interface in which to handle messages.  Also set whether the handler</div><div class="line"> * should be asynchronous.</div><div class="line"> *</div><div class="line"> * Handlers are synchronous by default unless this constructor is used to make</div><div class="line"> * one that is strictly asynchronous.</div><div class="line"> *</div><div class="line"> * Asynchronous messages represent interrupts or events that do not require global ordering</div><div class="line"> * with respect to synchronous messages.  Asynchronous messages are not subject to</div><div class="line"> * the synchronization barriers introduced by &#123;<span class="doctag">@link</span> MessageQueue#enqueueSyncBarrier(long)&#125;.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> looper The looper, must not be null.</div><div class="line"> * <span class="doctag">@param</span> callback The callback interface in which to handle messages, or null.</div><div class="line"> * <span class="doctag">@param</span> async If true, the handler calls &#123;<span class="doctag">@link</span> Message#setAsynchronous(boolean)&#125; for</div><div class="line"> * each &#123;<span class="doctag">@link</span> Message&#125; that is sent to it or &#123;<span class="doctag">@link</span> Runnable&#125; that is posted to it.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@hide</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Looper looper, Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</div><div class="line">    mLooper = looper;</div><div class="line">    mQueue = looper.mQueue;</div><div class="line">    mCallback = callback;</div><div class="line">    mAsynchronous = async;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Handler 的构造函数可以传入一个 Looper 对象，否则将会调用 <code>Looper.myLooper()</code> 从当前线程对象里取出前面 <code>Looper.prepare()</code> 存的 Looper 对象，之后 Handler 将 Looper 和 MessageQueue 作为对象成员。</p>
<p>最后我们就可以调用 <code>Looper.loop()</code> 来启动消息循环了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Run the message queue in this thread. Be sure to call</div><div class="line"> * &#123;<span class="doctag">@link</span> #quit()&#125; to end the loop.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Looper me = myLooper();</div><div class="line">    <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">final</span> MessageQueue queue = me.mQueue;</div><div class="line"></div><div class="line">    <span class="comment">// Make sure the identity of this thread is that of the local process,</span></div><div class="line">    <span class="comment">// and keep track of what that identity token actually is.</span></div><div class="line">    Binder.clearCallingIdentity();</div><div class="line">    <span class="keyword">final</span> <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        Message msg = queue.next(); <span class="comment">// might block</span></div><div class="line">        <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// No message indicates that the message queue is quitting.</span></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// This must be in a local variable, in case a UI event sets the logger</span></div><div class="line">        Printer logging = me.mLogging;</div><div class="line">        <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</div><div class="line">            logging.println(<span class="string">"&gt;&gt;&gt;&gt;&gt; Dispatching to "</span> + msg.target + <span class="string">" "</span> +</div><div class="line">                    msg.callback + <span class="string">": "</span> + msg.what);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        msg.target.dispatchMessage(msg);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</div><div class="line">            logging.println(<span class="string">"&lt;&lt;&lt;&lt;&lt; Finished to "</span> + msg.target + <span class="string">" "</span> + msg.callback);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Make sure that during the course of dispatching the</span></div><div class="line">        <span class="comment">// identity of the thread wasn't corrupted.</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">long</span> newIdent = Binder.clearCallingIdentity();</div><div class="line">        <span class="keyword">if</span> (ident != newIdent) &#123;</div><div class="line">            Log.wtf(TAG, <span class="string">"Thread identity changed from 0x"</span></div><div class="line">                    + Long.toHexString(ident) + <span class="string">" to 0x"</span></div><div class="line">                    + Long.toHexString(newIdent) + <span class="string">" while dispatching to "</span></div><div class="line">                    + msg.target.getClass().getName() + <span class="string">" "</span></div><div class="line">                    + msg.callback + <span class="string">" what="</span> + msg.what);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        msg.recycleUnchecked();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Looper.loop()</code> 会从当前线程对象中把前面存的 Looper 对象以及该对象的 mMessageQueue 取出来（这里取消息是通过调用 MessageQueue 的 <code>next()</code> 方法来取得下一条消息），然后启动消息循环，不停地从 mMessageQueue 里取消息并分派处理，也就是会调用消息对应的 target Handler 的 <code>dispathMessage()</code> 方法，当然这个消息处理过程就与 <code>Looper.loop()</code> 在同一个线程里了。</p>
<h2 id="2-向目标线程发消息"><a href="#2-向目标线程发消息" class="headerlink" title="2. 向目标线程发消息"></a>2. 向目标线程发消息</h2><p>在 Android 中我们使用 Handler 来完成的。我们从前面就知道 Handler 在创建的时候就会持有一个 MessageQueue 的引用，其实这个就是用来往 MessageQueue 里发消息用的。</p>
<p>当我们使用 Handler 发消息时，最后都会调用到 Handler 的 <code>enqueueMessage()</code> 方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line">    msg.target = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">if</span> (mAsynchronous) &#123;</div><div class="line">        msg.setAsynchronous(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里 Handler 将 Message 的 target 设置为自己，也就是指定了这条消息将会由自己来处理，然后将 Message 放进 MessageQueue 里面。</p>
<p>因为 MessageQueue 的 <code>enqueueMessage()</code> 方法的权限是 package level 的，我们不能直接调用，就需要通过 Handler 来把消息发到 MessageQueue 里。</p>
<p>所以 Handler 的作用主要有两个，一是处理消息，二是作为发消息的一个工具。</p>
<h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>那么根据以上分析，我们可以得出结论：</p>
<ul>
<li><p>一个 Looper 对象一定对应于一个线程，一个线程最多有一个 Looper 对象</p>
</li>
<li><p>一个 Message 最终由它的 target Handler 来处理</p>
</li>
<li><p>一个 Message 会在<strong>持有它所被加入的 MessageQueue 的 Looper 对象</strong>对应的线程中被处理</p>
</li>
</ul>
<p>所以如果我们在子线程中完成了耗时操作想要切换到主线程更新 UI 的时候，思路应该是：</p>
<p><code>主线程 Looper 的 MessageQueue -&gt; 主线程 Looper -&gt; 构造持有主线程 Looper 的 Handler（new Handler(Looper.getMainLooper())） -&gt; 使用该 Handler 发送消息</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android 中线程间通信消息机制的基本思想其实很简单：为目标线程建立一个消息循环用来“监听”消息，之后我们只要在其他线程中向目标线程发送消息就可以被目标线程接收并处理，这样就完成了两个线程之间的通信。&lt;/p&gt;
&lt;p&gt;下面我们一步一步来分析这个机制的实现（以下源码均基于 SDK 23）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Handler" scheme="https://wsxyeah.github.io/tags/Handler/"/>
    
  </entry>
  
  <entry>
    <title>重新认识 Activity LaunchMode</title>
    <link href="https://wsxyeah.github.io/2015/12/19/activity-launch-mode/"/>
    <id>https://wsxyeah.github.io/2015/12/19/activity-launch-mode/</id>
    <published>2015-12-19T08:43:40.000Z</published>
    <updated>2016-04-04T00:53:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>做 Android 的同学想必对 activity 启动模式都不陌生，activity 有四种启动模式（ <code>standard</code>，<code>singleTop</code>，<code>singleTask</code>，<code>singleInstance</code>），网上和一些书上也有各种讲解，但这些文章大多是针对四种启动模式进行介绍，总是在看过一段时间后就忘掉了。本文希望带你重新理解 activity 启动模式，并理解一些其他的相关概念，而不是仅仅针对四种启动模式。</p>
<a id="more"></a>
<h2 id="1-从-Task-说起"><a href="#1-从-Task-说起" class="headerlink" title="1. 从 Task 说起"></a>1. 从 Task 说起</h2><p>Activity 启动模式是与 task 密切相关的，所以我们先从 task 说起。</p>
<blockquote>
<p>A task is a collection of activities that users interact with when performing a certain job. The activities are arranged in a stack (the <em>back stack</em>), in the order in which each activity is opened.</p>
</blockquote>
<p>上面这句话是官方文档里的，解释了 Android 中 task 的概念，task 就是若干 activity 组成的一个集合，以栈的形式来管理。在 Android 中，每个 activity 都是运行在 task 中的，前台 task 的栈顶 activity 位于前台，可以直接与用户交互。</p>
<p>那么一个 activity 运行在哪个 task 中是由谁来决定的呢？我们首先来看 taskAffinity，taskAffinity 是影响 Activity 运行在哪个 task 中的第一个因素。</p>
<p>一个 activity 的 taskAffinity 是我们在 <code>manifests.xml</code> 里定义的，每个 Activity 都可以设置一个 <code>android:taskAffinity</code> 属性，它的值是一个字符串。<code>application</code> 元素也有这个属性，它的默认值是 <code>manifest</code> 元素中指定的包名（<code>package</code> 属性）。对于 Activity 的这个属性，当我们不显式设置的时候它就会从 <code>application</code> 元素继承。</p>
<p>那么<strong>在 taskAffinity 属性起作用</strong>的情况下，除了 taskAffinity 值为空字符串的 Activity，具有相同 taskAffinity 的 Activity 会运行在同一个 task 中，即使它们处于不同的应用中。taskAffinity 为空字符串表示这个 Activity 不会与其他任何 task 关联。</p>
<h2 id="2-manifests-xml-中的-launchMode"><a href="#2-manifests-xml-中的-launchMode" class="headerlink" title="2. manifests.xml 中的 launchMode"></a>2. <code>manifests.xml</code> 中的 launchMode</h2><p>我们可以在 <code>manifests.xml</code> 中为 activity 指定 <code>android:launchMode</code> 属性，可以的取值有 <code>standard</code>，<code>singleTop</code>，<code>singleTask</code>，<code>singleInstance</code>，默认值是 <code>standard</code>。</p>
<p>那么我们不设置 Intent flags（下文会讲到）的情况下启动一个 activity 的时候，系统就会根据 <code>manifests.xml</code> 里设置的 launchMode 来决定 activity 启动模式。下面是四种启动模式的处理说明。</p>
<ul>
<li><p><code>standard</code>，<code>singleTop</code>：在当前 task 中启动，<strong>忽略 taskAffinity 属性</strong>。<br>  两种模式的区别是 <code>standard</code> 模式每次启动都会创建新的实例，而 <code>singleTop</code> 模式则是若已经有该 activity 的实例存在于 task 栈顶的情况下不再创建新实例，而是回调该实例的 <code>onNewIntent()</code> 方法。</p>
</li>
<li><p><code>singleTask</code>：这时该 activity 要在哪个 task 中运行就由我们前面指定的 taskAffinity 来决定了（该 activity 只能运行在 taskAffinity 与自己的 taskAffinity 相同的 task 中）。并且在这个 task 中该 activity 的实例只允许存在一个，若已经有一个实例在栈顶，就会回调它的 <code>onNewIntent()</code> 方法；若有实例且不在栈顶，系统则会将该 task 中该位于该实例之上的 activity 出栈销毁，使该实例回到前台，并回调其 <code>onNewIntent()</code> 方法。</p>
</li>
<li><p><code>singleInstance</code>：与 <code>singleTask</code> 类似，区别在于 <code>singleInstance</code> 的 task 中只能有一个 activity 实例存在，即该 activity 只能单独运行于一个 task 中。</p>
</li>
</ul>
<h2 id="3-Intent-flag"><a href="#3-Intent-flag" class="headerlink" title="3. Intent flag"></a>3. Intent flag</h2><p>影响 activity 启动模式的另一个地方就是 Intent flag 了。我们可以在使用 Intent 启动一个 activity 的时候可以调用 Intent 的 <code>setFlag()</code> 方法来为它设置标志位，且 Intent flag 具有更高的优先级。影响 activity 启动模式的 Intent flag 有下面几个。</p>
<ul>
<li><p><code>FLAG_ACTIVITY_NEW_TASK</code>：在新 task 中启动 activity，效果与 <code>singleTask</code> 模式类似，但不会清除目标 activity 之上的 activity。使用这个 flag 可以实现应用间切换的效果。</p>
</li>
<li><p><code>FLAG_ACTIVITY_SINGLE_TOP</code>：与 <code>singleTop</code> 模式效果相同。</p>
</li>
<li><p><code>FLAG_ACTIVITY_CLEAR_TOP</code>：若目标 activity 在其 task 中已经有实例存在，则将 task 中其上的 activity 出栈销毁，使该实例回到前台，并回调其 <code>onNewIntent()</code> 方法。与 <code>FLAG_ACTIVITY_NEW_TASK</code> 结合使用可以实现 <code>singleTask</code> 模式的效果。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做 Android 的同学想必对 activity 启动模式都不陌生，activity 有四种启动模式（ &lt;code&gt;standard&lt;/code&gt;，&lt;code&gt;singleTop&lt;/code&gt;，&lt;code&gt;singleTask&lt;/code&gt;，&lt;code&gt;singleInstance&lt;/code&gt;），网上和一些书上也有各种讲解，但这些文章大多是针对四种启动模式进行介绍，总是在看过一段时间后就忘掉了。本文希望带你重新理解 activity 启动模式，并理解一些其他的相关概念，而不是仅仅针对四种启动模式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="LaunchMode" scheme="https://wsxyeah.github.io/tags/LaunchMode/"/>
    
  </entry>
  
  <entry>
    <title>Android NDK 开发环境搭建</title>
    <link href="https://wsxyeah.github.io/2015/12/06/android-ndk-start/"/>
    <id>https://wsxyeah.github.io/2015/12/06/android-ndk-start/</id>
    <published>2015-12-06T03:10:08.000Z</published>
    <updated>2016-04-04T00:22:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前也曾看过一些介绍 NDK 的文章，但是由于嫌（tuo）麻（yan）烦（zheng）一直没有实践过，这两天读了些文章和文档，打算把 NDK 的项目搭建的一些东西整理一下。</p>
<p>本文主要介绍 Eclipse 下和 Android Studio 下 NDK 开发环境的搭建。</p>
<a id="more"></a>
<h2 id="1-NDK-下载"><a href="#1-NDK-下载" class="headerlink" title="1. NDK 下载"></a>1. NDK 下载</h2><p><a href="http://developer.android.com/ndk/downloads/index.html" target="_blank" rel="external">http://developer.android.com/ndk/downloads/index.html</a></p>
<p>在这里根据平台选择相应的文件下载。</p>
<ul>
<li><p>Windows 下面可以直接双击下载的 exe 文件解压。</p>
</li>
<li><p>Linux 和 OS X 用户需要进入下载的文件目录，执行下面的命令解压。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chmod a+x android-ndk-r10c-darwin-x86_64.bin</div><div class="line">./android-ndk-r10c-darwin-x86_64.bin</div></pre></td></tr></table></figure>
<h2 id="2-环境变量配置"><a href="#2-环境变量配置" class="headerlink" title="2. 环境变量配置"></a>2. 环境变量配置</h2><p>只要把 NDK 目录加入到系统 PATH 变量就好了，这步是为了方便从命令行执行 NDK 脚本。</p>
<h2 id="3-Eclipse-下-NDK-项目搭建"><a href="#3-Eclipse-下-NDK-项目搭建" class="headerlink" title="3. Eclipse 下 NDK 项目搭建"></a>3. Eclipse 下 NDK 项目搭建</h2><h3 id="1-首先在-Eclipse-的设置里选择-NDK-目录。"><a href="#1-首先在-Eclipse-的设置里选择-NDK-目录。" class="headerlink" title="1. 首先在 Eclipse 的设置里选择 NDK 目录。"></a>1. 首先在 Eclipse 的设置里选择 NDK 目录。</h3><p><code>Android &gt; NDK &gt; NDK Location</code></p>
<h3 id="2-新建-Android-项目"><a href="#2-新建-Android-项目" class="headerlink" title="2. 新建 Android 项目"></a>2. 新建 Android 项目</h3><h3 id="3-添加-native-方法"><a href="#3-添加-native-方法" class="headerlink" title="3. 添加 native 方法"></a>3. 添加 native 方法</h3><p>native 方法在方法签名前加 <code>native</code> 关键字，无方法体。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">yo</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<h3 id="4-为项目添加-NDK-支持"><a href="#4-为项目添加-NDK-支持" class="headerlink" title="4. 为项目添加 NDK 支持"></a>4. 为项目添加 NDK 支持</h3><p>在左侧项目视图上点击右键，选择 Android Tools -&gt; Add Native Support…，然后输入 Library Name：libxxx.so，Finish。</p>
<p>之后 Eclipse 会为我们生成 jni 目录以及 <code>Android.mk</code>，<code>xxx.cpp</code> 两个文件。</p>
<h3 id="5-生成-jni-头文件"><a href="#5-生成-jni-头文件" class="headerlink" title="5. 生成 jni 头文件"></a>5. 生成 jni 头文件</h3><p>在 Eclipse 中执行 build 命令，然后进入到项目的 <code>bin\classes</code> 目录，执行 <code>javah -cp 完整类名 android.jar</code> 命令，其中完整的类名是指包含包名，<code>android.jar</code> 是 SDK 目录下对应的 compile SDK 版本目录下面的 android.jar 的路径，比如我的 compile SDK 版本是 23，那我的路径就是 <code>SDK目录\platforms\android-23\android.jar</code>。此时会 javah 会为我们在 classes 目录下生成 jni 头文件。</p>
<h3 id="6-根据-jni-头文件在-xxx-cpp-中编写-native-代码"><a href="#6-根据-jni-头文件在-xxx-cpp-中编写-native-代码" class="headerlink" title="6. 根据 jni 头文件在 xxx.cpp 中编写 native 代码"></a>6. 根据 jni 头文件在 xxx.cpp 中编写 native 代码</h3><p>此处需要注意的是如果使用 C++ 编写，需要定义 <code>extern &quot;C&quot;</code> 宏。</p>
<p>关于 <code>extern &quot;C&quot;</code> 的详细信息可以参考这篇文章 <a href="http://www.jianshu.com/p/5d2eeeb93590" target="_blank" rel="external">extern “c”用法解析
</a>。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">	</div><div class="line"><span class="comment">/*</span></div><div class="line">* Class:     me_sxwang_jnipractice_MainActivity</div><div class="line">* Method:    yo</div><div class="line">* Signature: ()Ljava/lang/String;</div><div class="line">*/</div><div class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_me_sxwang_jnipractice_MainActivity_yo</span></span></div><div class="line">		<span class="params">(JNIEnv *env, jobject thiz)</span> &#123;</div><div class="line">	<span class="keyword">return</span> env-&gt;NewStringUTF(<span class="string">"I come from JNI."</span>);</div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<h3 id="7-编译-native-代码"><a href="#7-编译-native-代码" class="headerlink" title="7. 编译 native 代码"></a>7. 编译 native 代码</h3><p>进入项目根目录，使用 <code>ndk-build</code> 命令执行编译，编译完成后会在项目的 <code>libs</code> 目录下生成相应的 so 文件。</p>
<h3 id="8-加载-jni-库，运行调试"><a href="#8-加载-jni-库，运行调试" class="headerlink" title="8. 加载 jni 库，运行调试"></a>8. 加载 jni 库，运行调试</h3><p>在类中添加初始化代码段加载 jni 库</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> &#123;</div><div class="line">	System.loadLibrary(<span class="string">"xxx"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-Android-Studio-下-NDK-项目搭建（基于-Android-Studio-1-5）"><a href="#4-Android-Studio-下-NDK-项目搭建（基于-Android-Studio-1-5）" class="headerlink" title="4. Android Studio 下 NDK 项目搭建（基于 Android Studio 1.5）"></a>4. Android Studio 下 NDK 项目搭建（基于 Android Studio 1.5）</h2><h3 id="1-新建-Android-项目"><a href="#1-新建-Android-项目" class="headerlink" title="1. 新建 Android 项目"></a>1. 新建 Android 项目</h3><h3 id="2-在项目的-Project-Structure-中选择-NDK-所在目录"><a href="#2-在项目的-Project-Structure-中选择-NDK-所在目录" class="headerlink" title="2. 在项目的 Project Structure 中选择 NDK 所在目录"></a>2. 在项目的 Project Structure 中选择 NDK 所在目录</h3><h3 id="3-为-build-gradle-Module-app-添加-NDK-模块"><a href="#3-为-build-gradle-Module-app-添加-NDK-模块" class="headerlink" title="3. 为 build.gradle (Module: app) 添加 NDK 模块"></a>3. 为 <code>build.gradle (Module: app)</code> 添加 NDK 模块</h3><p><del>在 android &gt; defaultConfig 下新增如下片段，执行 build，会提示需要在 gradle.properties 添加 <code>android.useDeprecatedNdk=true</code>，根据提示添加完后重新 build 一下。</del></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ndk &#123;</div><div class="line">	moduleName &quot;xxx&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 <a href="">https://bintray.com/android/android-tools/com.android.tools.build.gradle-experimental/view</a> 查看 gradle-experimental 插件的最新版，并在 Project 的 buildscript&gt;dependencies classpath 中替换原有的插件。<br>启用 gralde-experimental 需要修改 module 的配置。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;com.android.model.application&apos;</div><div class="line">model &#123;</div><div class="line">	android &#123;</div><div class="line">		compileSdkVersion = 23</div><div class="line">		buildToolsVersion = &quot;23.0.1&quot;</div><div class="line"></div><div class="line">		defaultConfig.with &#123;</div><div class="line">			applicationId = &quot;com.google.sample.helloandroidjni&quot;</div><div class="line">			minSdkVersion.apiLevel = 22</div><div class="line">			targetSdkVersion.apiLevel = 23</div><div class="line">			versionCode = 1</div><div class="line">			versionName = &quot;1.0&quot;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	android.buildTypes &#123;</div><div class="line">		release &#123;</div><div class="line">			minifyEnabled = false</div><div class="line">			proguardFiles.add(file(&apos;proguard-android.txt&apos;))</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-创建-native-方法"><a href="#4-创建-native-方法" class="headerlink" title="4. 创建 native 方法"></a>4. 创建 native 方法</h3><p>同 Eclipse</p>
<h3 id="5-生成-jni-文件"><a href="#5-生成-jni-文件" class="headerlink" title="5. 生成 jni 文件"></a>5. 生成 jni 文件</h3><p>在 native 方法名上，按 <code>Option ＋ Enter</code> 键根据提示选择第一项 Create function …，Android Studio 会自动为我们生成相应的 c 文件，及方法签名等信息，方便我们编写 native 代码。</p>
<h3 id="6-编写-native-代码，加载-jni-库，运行调试"><a href="#6-编写-native-代码，加载-jni-库，运行调试" class="headerlink" title="6. 编写 native 代码，加载 jni 库，运行调试"></a>6. 编写 native 代码，加载 jni 库，运行调试</h3><p>同 Eclipse，Android Studio 会自动帮我们编译 native 代码，无需手动编译</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前也曾看过一些介绍 NDK 的文章，但是由于嫌（tuo）麻（yan）烦（zheng）一直没有实践过，这两天读了些文章和文档，打算把 NDK 的项目搭建的一些东西整理一下。&lt;/p&gt;
&lt;p&gt;本文主要介绍 Eclipse 下和 Android Studio 下 NDK 开发环境的搭建。&lt;/p&gt;
    
    </summary>
    
    
      <category term="NDK" scheme="https://wsxyeah.github.io/tags/NDK/"/>
    
  </entry>
  
  <entry>
    <title>Android 异步加载数据方式整理</title>
    <link href="https://wsxyeah.github.io/2015/11/22/android-async/"/>
    <id>https://wsxyeah.github.io/2015/11/22/android-async/</id>
    <published>2015-11-22T02:43:12.000Z</published>
    <updated>2016-07-23T10:01:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 Android 中，由于主线程负责维护 UI，不能被阻塞，那么在通过磁盘或者网络进行异步加载数据的时候就需要使用多线程了。以下是我整理的几种使用多线程执行异步操作的方式，如有纰漏欢迎指正。</p>
<a id="more"></a>
<h2 id="1-Handler"><a href="#1-Handler" class="headerlink" title="1. Handler"></a>1. Handler</h2><p>   Android 中多线程通信基本的方式是使用 Handler 机制，基本使用方式如下。</p>
   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">//init handler on the original thread</div><div class="line">class OriginalThread extends Thread &#123;</div><div class="line"> public Handler mHandler;</div><div class="line"> public void run() &#123;</div><div class="line">   Looper.prepare();</div><div class="line">   mHandler = new Handler() &#123;</div><div class="line">     public void handleMessage(Message msg) &#123;</div><div class="line">     	// process incoming messages here</div><div class="line">     &#125;</div><div class="line">   &#125;;</div><div class="line">   Looper.loop();</div><div class="line"> &#125;</div><div class="line">&#125;</div><div class="line">//send message to the original thread</div><div class="line">mHandler.post(Runnable);</div><div class="line">mHandler.postAtTime(Runnable, long);</div><div class="line">mHandler.postDelayed(Runnable, long);</div><div class="line">mHandler.sendEmptyMessage(int);</div><div class="line">mHandler.sendMessage(Message);</div><div class="line">mHandler.sendMessageAtTime(Message, long);</div><div class="line">mHandler.sendMessageDelayed(Message, long);</div></pre></td></tr></table></figure>
<p>   系统还内置了AsyncQueryHandler 辅助子类，方便使用 ContentResolver 进行异步查询操作。</p>
<p>   关于 Handler，需要注意的是，当 Handler 被声明为 Activity 的非静态内部类时， Handler 会持有外部 Activity 实例的引用，Handler 生命周期比 Activity 长时会导致 Activity 实例不能被正常释放，从而引起内存泄漏。一种解决方式是将 Handler 声明为 Activity 的静态内部类或者单独的类，在 Handler 内部使用 WeakReference/SoftReference 保存对 Activity的引用，既能访问 Activity 的 View 更新 UI，又可以避免内存泄漏。</p>
<h2 id="2-AsyncTask"><a href="#2-AsyncTask" class="headerlink" title="2. AsyncTask"></a>2. AsyncTask</h2><p>   AsyncTask 方式是官方提供的用来简化手动写 Handler 的一种异步机制，其内部仍使用 Handler 实现。</p>
<p>   需要继承AsyncTask<params, progress,="" result="">类，重写doInBackground，onPostExecute等回调方法，使用的时候调用 execute 方法（只能在 UI 线程调用）传入参数就可以方便的执行 IO 或网络等耗时操作并在操作完成时更新 UI。</params,></p>
<p>   使用 AsyncTask 同样需要注意内存泄漏问题。</p>
<h2 id="3-Activity-runOnUiThread-Runnable-action"><a href="#3-Activity-runOnUiThread-Runnable-action" class="headerlink" title="3. Activity.runOnUiThread(Runnable action)"></a>3. Activity.runOnUiThread(Runnable action)</h2><p>   算是 Handler 方式的一种语法糖吧，使用了 Activity 自身维护的 一个 mHandler 实例，便于在 UI 线程执行操作，比如异步获取数据后更新 UI。</p>
<h2 id="4-Loader"><a href="#4-Loader" class="headerlink" title="4. Loader"></a>4. Loader</h2><p>   Loader 是在 Android 3.0 引入的用于在 Activity 和 Fragment 中简化异步加载数据的方式。</p>
<p>   系统提供了 AsyncTaskLoader<d> 和 CursorLoader 两个子类。</d></p>
<h2 id="5-View-post-Runnable-action-View-postDelayed-Runnable-action-long-delayMillis"><a href="#5-View-post-Runnable-action-View-postDelayed-Runnable-action-long-delayMillis" class="headerlink" title="5. View.post(Runnable action)/View.postDelayed(Runnable action, long delayMillis)"></a>5. View.post(Runnable action)/View.postDelayed(Runnable action, long delayMillis)</h2><h2 id="6-RxJava"><a href="#6-RxJava" class="headerlink" title="6. RxJava"></a>6. RxJava</h2><p>   使用 RxJava 可以方便地进行多线程调度，通过调用 Observable.subscribeOn 和 Observable.observeOn，并使用 Schedulers.io() 和 Schedulers.mainThread() 等工厂方法传入参数即可自由切换线程。</p>
<h2 id="7-EventBus"><a href="#7-EventBus" class="headerlink" title="7. EventBus"></a>7. EventBus</h2><p>   使用 EventBus 可以在任意线程发布数据，并通过订阅方法的命名约定规定在何种线程执行订阅的回调方法。</p>
   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// Called in the same thread (default)</div><div class="line">public void onEvent(MessageEvent event) &#123;</div><div class="line">	log(event.message);</div><div class="line">&#125;</div><div class="line">// Called in Android UI&apos;s main thread</div><div class="line">public void onEventMainThread(MessageEvent event) &#123;</div><div class="line">	textField.setText(event.message);</div><div class="line">&#125;</div><div class="line">// Called in the background thread</div><div class="line">public void onEventBackgroundThread(MessageEvent event)&#123;</div><div class="line">	saveToDisk(event.message);</div><div class="line">&#125;</div><div class="line">// Called in a separate thread</div><div class="line">public void onEventAsync(MessageEvent event)&#123;</div><div class="line">	backend.send(event.message);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Android 中，由于主线程负责维护 UI，不能被阻塞，那么在通过磁盘或者网络进行异步加载数据的时候就需要使用多线程了。以下是我整理的几种使用多线程执行异步操作的方式，如有纰漏欢迎指正。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Async" scheme="https://wsxyeah.github.io/tags/Async/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://wsxyeah.github.io/2015/11/06/hello-world/"/>
    <id>https://wsxyeah.github.io/2015/11/06/hello-world/</id>
    <published>2015-11-06T02:47:20.000Z</published>
    <updated>2016-04-04T00:23:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;http://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;http://hexo.io
    
    </summary>
    
    
  </entry>
  
</feed>
